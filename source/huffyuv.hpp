#pragma once

#include "avi.hpp"

#include <cstdio>
#include <vector>

class huffyuv final {
public:
    // Highest number of lines that will not trigger fieldmode.
    constexpr static const int field_threshold = 288;
    constexpr static const bool ignore_interlaced_flag = false;

private:
    // Static Y,U,V or B,G,R or B-G,G,R-G (decorrelation) huffman tables for the different prediction modes.
    // Note: When processing RGBA data, A is processed with either the R table or the R-G table (decorrelation).
    class tables final {
    public:
        enum class modes {
            rgb_classic,
            rgb_prediction_left,
            rgb_prediction_left_decorrelate,
            rgb_prediction_gradient_decorrelate,

            yuv_classic,
            yuv_prediction_left,
            yuv_prediction_gradient,
            yuv_prediction_median
        };

        class shift_type final {
        public:
            unsigned char data[256];
        };
        class add_shifted_type final {
        public:
            unsigned int data[256];
        };
        class decode_table_type final {
        public:
            tables::shift_type shift;
            tables::add_shifted_type add_shifted;
            unsigned char* pointers[32];
            unsigned char data[129 * 25];
        };

    private:
        class rgb final {
        public:
            class classic final {
            public:
                constexpr static const shift_type shift_b = {{
                    0x02, 0x04, 0x03, 0x05, 0x05, 0x07, 0x07, 0x07, 0x07, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
                    0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B,
                    0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0D,
                    0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
                    0x10, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x0F,
                    0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B,
                    0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
                    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x06, 0x06, 0x05, 0x05, 0x04, 0x04,
                }};
                constexpr static const shift_type shift_g = {{
                    0x02, 0x04, 0x03, 0x05, 0x05, 0x07, 0x07, 0x07, 0x07, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
                    0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B,
                    0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0D,
                    0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
                    0x10, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x0F,
                    0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B,
                    0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
                    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x06, 0x06, 0x05, 0x05, 0x04, 0x04,
                }};
                constexpr static const shift_type shift_r = {{
                    0x02, 0x04, 0x03, 0x05, 0x05, 0x07, 0x07, 0x07, 0x07, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
                    0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B,
                    0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0D,
                    0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
                    0x10, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x0F,
                    0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B,
                    0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
                    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x06, 0x06, 0x05, 0x05, 0x04, 0x04,
                }};

                constexpr static const add_shifted_type add_shifted_b = {{
                    0xC0000000, 0x90000000, 0xA0000000, 0x60000000, 0x50000000, 0x46000000, 0x40000000, 0x3A000000, 0x36000000, 0x32000000, 0x30000000, 0x2D000000, 0x2C000000, 0x29000000, 0x27000000, 0x25000000,
                    0x24800000, 0x23000000, 0x22000000, 0x20800000, 0x20000000, 0x1E800000, 0x1D000000, 0x1C000000, 0x1A800000, 0x19000000, 0x18800000, 0x17000000, 0x16000000, 0x14800000, 0x13000000, 0x12000000,
                    0x11000000, 0x10400000, 0x0FC00000, 0x0F400000, 0x0E800000, 0x0DC00000, 0x0D400000, 0x0CC00000, 0x0C000000, 0x0B800000, 0x0B400000, 0x0AC00000, 0x0A400000, 0x09C00000, 0x09800000, 0x09000000,
                    0x08C00000, 0x08400000, 0x08000000, 0x07800000, 0x07400000, 0x06C00000, 0x06800000, 0x06400000, 0x06000000, 0x05E00000, 0x05C00000, 0x05800000, 0x05600000, 0x05200000, 0x05000000, 0x04E00000,
                    0x04A00000, 0x04800000, 0x04600000, 0x04400000, 0x04000000, 0x03E00000, 0x03C00000, 0x03800000, 0x03600000, 0x03400000, 0x03000000, 0x02E00000, 0x02C00000, 0x02800000, 0x02600000, 0x02500000,
                    0x02300000, 0x02200000, 0x02100000, 0x01F00000, 0x01E00000, 0x01D00000, 0x01B00000, 0x01A00000, 0x01800000, 0x01700000, 0x01500000, 0x01400000, 0x01200000, 0x01100000, 0x00F00000, 0x00E80000,
                    0x00D80000, 0x00D00000, 0x00C00000, 0x00B00000, 0x00A80000, 0x00980000, 0x00880000, 0x00800000, 0x00700000, 0x00680000, 0x00640000, 0x005C0000, 0x00540000, 0x004C0000, 0x00480000, 0x00400000,
                    0x003C0000, 0x00360000, 0x00320000, 0x002E0000, 0x002A0000, 0x00260000, 0x00220000, 0x00200000, 0x001C0000, 0x001A0000, 0x00190000, 0x00170000, 0x00150000, 0x00120000, 0x00110000, 0x000E0000,
                    0x000C0000, 0x00088000, 0x00098000, 0x00068000, 0x00020000, 0x00048000, 0x00010000, 0x00058000, 0x00008000, 0x00038000, 0x00040000, 0x00000000, 0x00080000, 0x00018000, 0x00070000, 0x00030000,
                    0x00060000, 0x00050000, 0x00028000, 0x00078000, 0x00090000, 0x000B0000, 0x000A0000, 0x000D0000, 0x000F0000, 0x00100000, 0x00130000, 0x00140000, 0x00160000, 0x00180000, 0x001B0000, 0x001E0000,
                    0x00240000, 0x00280000, 0x002C0000, 0x00300000, 0x00340000, 0x00380000, 0x00440000, 0x00500000, 0x00580000, 0x00600000, 0x006C0000, 0x00780000, 0x00900000, 0x00A00000, 0x00B80000, 0x00C80000,
                    0x00E00000, 0x01000000, 0x01300000, 0x01600000, 0x01900000, 0x01C00000, 0x02000000, 0x02400000, 0x02A00000, 0x03200000, 0x03A00000, 0x04200000, 0x04C00000, 0x05400000, 0x05A00000, 0x06200000,
                    0x07000000, 0x07C00000, 0x08800000, 0x09400000, 0x0A000000, 0x0A800000, 0x0B000000, 0x0BC00000, 0x0C400000, 0x0C800000, 0x0D000000, 0x0D800000, 0x0E000000, 0x0E400000, 0x0EC00000, 0x0F000000,
                    0x0F800000, 0x10000000, 0x10800000, 0x10C00000, 0x11400000, 0x11800000, 0x12800000, 0x13800000, 0x14000000, 0x15000000, 0x15800000, 0x16800000, 0x17800000, 0x18000000, 0x19800000, 0x1A000000,
                    0x1B000000, 0x1B800000, 0x1C800000, 0x1D800000, 0x1E000000, 0x1F000000, 0x1F800000, 0x21000000, 0x21800000, 0x22800000, 0x23800000, 0x24000000, 0x26000000, 0x28000000, 0x2A000000, 0x2B000000,
                    0x2E000000, 0x2F000000, 0x31000000, 0x33000000, 0x34000000, 0x38000000, 0x3C000000, 0x3E000000, 0x42000000, 0x44000000, 0x48000000, 0x4C000000, 0x58000000, 0x68000000, 0x70000000, 0x80000000,
                }};
                constexpr static const add_shifted_type add_shifted_g = {{
                    0xC0000000, 0x90000000, 0xA0000000, 0x60000000, 0x50000000, 0x46000000, 0x40000000, 0x3A000000, 0x36000000, 0x32000000, 0x30000000, 0x2D000000, 0x2C000000, 0x29000000, 0x27000000, 0x25000000,
                    0x24800000, 0x23000000, 0x22000000, 0x20800000, 0x20000000, 0x1E800000, 0x1D000000, 0x1C000000, 0x1A800000, 0x19000000, 0x18800000, 0x17000000, 0x16000000, 0x14800000, 0x13000000, 0x12000000,
                    0x11000000, 0x10400000, 0x0FC00000, 0x0F400000, 0x0E800000, 0x0DC00000, 0x0D400000, 0x0CC00000, 0x0C000000, 0x0B800000, 0x0B400000, 0x0AC00000, 0x0A400000, 0x09C00000, 0x09800000, 0x09000000,
                    0x08C00000, 0x08400000, 0x08000000, 0x07800000, 0x07400000, 0x06C00000, 0x06800000, 0x06400000, 0x06000000, 0x05E00000, 0x05C00000, 0x05800000, 0x05600000, 0x05200000, 0x05000000, 0x04E00000,
                    0x04A00000, 0x04800000, 0x04600000, 0x04400000, 0x04000000, 0x03E00000, 0x03C00000, 0x03800000, 0x03600000, 0x03400000, 0x03000000, 0x02E00000, 0x02C00000, 0x02800000, 0x02600000, 0x02500000,
                    0x02300000, 0x02200000, 0x02100000, 0x01F00000, 0x01E00000, 0x01D00000, 0x01B00000, 0x01A00000, 0x01800000, 0x01700000, 0x01500000, 0x01400000, 0x01200000, 0x01100000, 0x00F00000, 0x00E80000,
                    0x00D80000, 0x00D00000, 0x00C00000, 0x00B00000, 0x00A80000, 0x00980000, 0x00880000, 0x00800000, 0x00700000, 0x00680000, 0x00640000, 0x005C0000, 0x00540000, 0x004C0000, 0x00480000, 0x00400000,
                    0x003C0000, 0x00360000, 0x00320000, 0x002E0000, 0x002A0000, 0x00260000, 0x00220000, 0x00200000, 0x001C0000, 0x001A0000, 0x00190000, 0x00170000, 0x00150000, 0x00120000, 0x00110000, 0x000E0000,
                    0x000C0000, 0x00088000, 0x00098000, 0x00068000, 0x00020000, 0x00048000, 0x00010000, 0x00058000, 0x00008000, 0x00038000, 0x00040000, 0x00000000, 0x00080000, 0x00018000, 0x00070000, 0x00030000,
                    0x00060000, 0x00050000, 0x00028000, 0x00078000, 0x00090000, 0x000B0000, 0x000A0000, 0x000D0000, 0x000F0000, 0x00100000, 0x00130000, 0x00140000, 0x00160000, 0x00180000, 0x001B0000, 0x001E0000,
                    0x00240000, 0x00280000, 0x002C0000, 0x00300000, 0x00340000, 0x00380000, 0x00440000, 0x00500000, 0x00580000, 0x00600000, 0x006C0000, 0x00780000, 0x00900000, 0x00A00000, 0x00B80000, 0x00C80000,
                    0x00E00000, 0x01000000, 0x01300000, 0x01600000, 0x01900000, 0x01C00000, 0x02000000, 0x02400000, 0x02A00000, 0x03200000, 0x03A00000, 0x04200000, 0x04C00000, 0x05400000, 0x05A00000, 0x06200000,
                    0x07000000, 0x07C00000, 0x08800000, 0x09400000, 0x0A000000, 0x0A800000, 0x0B000000, 0x0BC00000, 0x0C400000, 0x0C800000, 0x0D000000, 0x0D800000, 0x0E000000, 0x0E400000, 0x0EC00000, 0x0F000000,
                    0x0F800000, 0x10000000, 0x10800000, 0x10C00000, 0x11400000, 0x11800000, 0x12800000, 0x13800000, 0x14000000, 0x15000000, 0x15800000, 0x16800000, 0x17800000, 0x18000000, 0x19800000, 0x1A000000,
                    0x1B000000, 0x1B800000, 0x1C800000, 0x1D800000, 0x1E000000, 0x1F000000, 0x1F800000, 0x21000000, 0x21800000, 0x22800000, 0x23800000, 0x24000000, 0x26000000, 0x28000000, 0x2A000000, 0x2B000000,
                    0x2E000000, 0x2F000000, 0x31000000, 0x33000000, 0x34000000, 0x38000000, 0x3C000000, 0x3E000000, 0x42000000, 0x44000000, 0x48000000, 0x4C000000, 0x58000000, 0x68000000, 0x70000000, 0x80000000,
                }};
                constexpr static const add_shifted_type add_shifted_r = {{
                    0xC0000000, 0x90000000, 0xA0000000, 0x60000000, 0x50000000, 0x46000000, 0x40000000, 0x3A000000, 0x36000000, 0x32000000, 0x30000000, 0x2D000000, 0x2C000000, 0x29000000, 0x27000000, 0x25000000,
                    0x24800000, 0x23000000, 0x22000000, 0x20800000, 0x20000000, 0x1E800000, 0x1D000000, 0x1C000000, 0x1A800000, 0x19000000, 0x18800000, 0x17000000, 0x16000000, 0x14800000, 0x13000000, 0x12000000,
                    0x11000000, 0x10400000, 0x0FC00000, 0x0F400000, 0x0E800000, 0x0DC00000, 0x0D400000, 0x0CC00000, 0x0C000000, 0x0B800000, 0x0B400000, 0x0AC00000, 0x0A400000, 0x09C00000, 0x09800000, 0x09000000,
                    0x08C00000, 0x08400000, 0x08000000, 0x07800000, 0x07400000, 0x06C00000, 0x06800000, 0x06400000, 0x06000000, 0x05E00000, 0x05C00000, 0x05800000, 0x05600000, 0x05200000, 0x05000000, 0x04E00000,
                    0x04A00000, 0x04800000, 0x04600000, 0x04400000, 0x04000000, 0x03E00000, 0x03C00000, 0x03800000, 0x03600000, 0x03400000, 0x03000000, 0x02E00000, 0x02C00000, 0x02800000, 0x02600000, 0x02500000,
                    0x02300000, 0x02200000, 0x02100000, 0x01F00000, 0x01E00000, 0x01D00000, 0x01B00000, 0x01A00000, 0x01800000, 0x01700000, 0x01500000, 0x01400000, 0x01200000, 0x01100000, 0x00F00000, 0x00E80000,
                    0x00D80000, 0x00D00000, 0x00C00000, 0x00B00000, 0x00A80000, 0x00980000, 0x00880000, 0x00800000, 0x00700000, 0x00680000, 0x00640000, 0x005C0000, 0x00540000, 0x004C0000, 0x00480000, 0x00400000,
                    0x003C0000, 0x00360000, 0x00320000, 0x002E0000, 0x002A0000, 0x00260000, 0x00220000, 0x00200000, 0x001C0000, 0x001A0000, 0x00190000, 0x00170000, 0x00150000, 0x00120000, 0x00110000, 0x000E0000,
                    0x000C0000, 0x00088000, 0x00098000, 0x00068000, 0x00020000, 0x00048000, 0x00010000, 0x00058000, 0x00008000, 0x00038000, 0x00040000, 0x00000000, 0x00080000, 0x00018000, 0x00070000, 0x00030000,
                    0x00060000, 0x00050000, 0x00028000, 0x00078000, 0x00090000, 0x000B0000, 0x000A0000, 0x000D0000, 0x000F0000, 0x00100000, 0x00130000, 0x00140000, 0x00160000, 0x00180000, 0x001B0000, 0x001E0000,
                    0x00240000, 0x00280000, 0x002C0000, 0x00300000, 0x00340000, 0x00380000, 0x00440000, 0x00500000, 0x00580000, 0x00600000, 0x006C0000, 0x00780000, 0x00900000, 0x00A00000, 0x00B80000, 0x00C80000,
                    0x00E00000, 0x01000000, 0x01300000, 0x01600000, 0x01900000, 0x01C00000, 0x02000000, 0x02400000, 0x02A00000, 0x03200000, 0x03A00000, 0x04200000, 0x04C00000, 0x05400000, 0x05A00000, 0x06200000,
                    0x07000000, 0x07C00000, 0x08800000, 0x09400000, 0x0A000000, 0x0A800000, 0x0B000000, 0x0BC00000, 0x0C400000, 0x0C800000, 0x0D000000, 0x0D800000, 0x0E000000, 0x0E400000, 0x0EC00000, 0x0F000000,
                    0x0F800000, 0x10000000, 0x10800000, 0x10C00000, 0x11400000, 0x11800000, 0x12800000, 0x13800000, 0x14000000, 0x15000000, 0x15800000, 0x16800000, 0x17800000, 0x18000000, 0x19800000, 0x1A000000,
                    0x1B000000, 0x1B800000, 0x1C800000, 0x1D800000, 0x1E000000, 0x1F000000, 0x1F800000, 0x21000000, 0x21800000, 0x22800000, 0x23800000, 0x24000000, 0x26000000, 0x28000000, 0x2A000000, 0x2B000000,
                    0x2E000000, 0x2F000000, 0x31000000, 0x33000000, 0x34000000, 0x38000000, 0x3C000000, 0x3E000000, 0x42000000, 0x44000000, 0x48000000, 0x4C000000, 0x58000000, 0x68000000, 0x70000000, 0x80000000,
                }};
            };

            class prediction_left final {
            public:
                constexpr static const shift_type shift_b = {{
                    0x03, 0x03, 0x03, 0x04, 0x05, 0x06, 0x07, 0x07, 0x08, 0x08, 0x08, 0x08, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0B,
                    0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,
                    0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D,
                    0x0D, 0x0D, 0x0D, 0x0D, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E,
                    0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0E, 0x0F, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0D,
                    0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0C, 0x0D, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,
                    0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B,
                    0x0B, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x08, 0x08, 0x08, 0x08, 0x08, 0x07, 0x07, 0x06, 0x05, 0x04, 0x03, 0x03,
                }};
                constexpr static const shift_type shift_g = {{
                    0x02, 0x03, 0x03, 0x05, 0x06, 0x06, 0x07, 0x07, 0x08, 0x08, 0x08, 0x08, 0x08, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A,
                    0x0A, 0x0A, 0x0A, 0x0A, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,
                    0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D,
                    0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E,
                    0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D,
                    0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,
                    0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A,
                    0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x07, 0x07, 0x07, 0x06, 0x06, 0x05, 0x04, 0x03,
                }};
                constexpr static const shift_type shift_r = {{
                    0x02, 0x03, 0x04, 0x04, 0x05, 0x06, 0x07, 0x07, 0x08, 0x08, 0x08, 0x08, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0B, 0x0B,
                    0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,
                    0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D,
                    0x0D, 0x0D, 0x0D, 0x0D, 0x0E, 0x0D, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E,
                    0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E,
                    0x0E, 0x0E, 0x0E, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,
                    0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B,
                    0x0B, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x08, 0x08, 0x08, 0x08, 0x08, 0x07, 0x07, 0x06, 0x05, 0x04, 0x04, 0x03,
                }};

                constexpr static const add_shifted_type add_shifted_b = {{
                    0x60000000, 0x80000000, 0xA0000000, 0x40000000, 0x30000000, 0x28000000, 0x20000000, 0x22000000, 0x17000000, 0x18000000, 0x19000000, 0x1A000000, 0x10000000, 0x10800000, 0x11000000, 0x11800000,
                    0x12000000, 0x12800000, 0x0A000000, 0x0A400000, 0x0A800000, 0x0AC00000, 0x0B000000, 0x0B400000, 0x0B800000, 0x0BC00000, 0x0C000000, 0x0C400000, 0x0C800000, 0x0CC00000, 0x0D000000, 0x05400000,
                    0x05600000, 0x05800000, 0x05A00000, 0x05C00000, 0x05E00000, 0x06000000, 0x06200000, 0x06400000, 0x06600000, 0x06800000, 0x06A00000, 0x06C00000, 0x06E00000, 0x07000000, 0x07200000, 0x07400000,
                    0x07600000, 0x07800000, 0x02800000, 0x02900000, 0x02A00000, 0x02B00000, 0x02C00000, 0x02D00000, 0x02E00000, 0x02F00000, 0x03000000, 0x03100000, 0x03200000, 0x03300000, 0x03400000, 0x03500000,
                    0x03600000, 0x03700000, 0x03800000, 0x03900000, 0x03A00000, 0x03B00000, 0x03C00000, 0x03D00000, 0x00D80000, 0x00E00000, 0x00E80000, 0x00F00000, 0x00F80000, 0x01000000, 0x01080000, 0x01100000,
                    0x01180000, 0x01200000, 0x01280000, 0x01300000, 0x01380000, 0x01400000, 0x01480000, 0x01500000, 0x01580000, 0x01600000, 0x01680000, 0x01700000, 0x01780000, 0x01800000, 0x01880000, 0x01900000,
                    0x01980000, 0x01A00000, 0x01A80000, 0x01B00000, 0x00140000, 0x00180000, 0x001C0000, 0x00200000, 0x00240000, 0x00280000, 0x002C0000, 0x00300000, 0x00340000, 0x00380000, 0x003C0000, 0x00400000,
                    0x00440000, 0x00480000, 0x004C0000, 0x00500000, 0x00540000, 0x00580000, 0x005C0000, 0x00600000, 0x00640000, 0x00680000, 0x006C0000, 0x00700000, 0x00740000, 0x00780000, 0x007C0000, 0x00800000,
                    0x00840000, 0x00880000, 0x008C0000, 0x00900000, 0x00940000, 0x00000000, 0x00020000, 0x00040000, 0x00060000, 0x00080000, 0x000A0000, 0x000C0000, 0x000E0000, 0x00100000, 0x00980000, 0x00120000,
                    0x009C0000, 0x00A00000, 0x00A40000, 0x00A80000, 0x00AC0000, 0x00B00000, 0x00B40000, 0x00B80000, 0x00BC0000, 0x00C00000, 0x00C40000, 0x00C80000, 0x00CC0000, 0x00D00000, 0x00D40000, 0x01B80000,
                    0x01C00000, 0x01C80000, 0x01D00000, 0x01D80000, 0x01E00000, 0x01E80000, 0x01F00000, 0x01F80000, 0x02000000, 0x02080000, 0x02100000, 0x02180000, 0x02200000, 0x02280000, 0x02300000, 0x02380000,
                    0x02400000, 0x02480000, 0x02500000, 0x02580000, 0x02600000, 0x02680000, 0x02700000, 0x03E00000, 0x02780000, 0x03F00000, 0x04000000, 0x04100000, 0x04200000, 0x04300000, 0x04400000, 0x04500000,
                    0x04600000, 0x04700000, 0x04800000, 0x04900000, 0x04A00000, 0x04B00000, 0x04C00000, 0x04D00000, 0x04E00000, 0x04F00000, 0x05000000, 0x05100000, 0x05200000, 0x05300000, 0x07A00000, 0x07C00000,
                    0x07E00000, 0x08000000, 0x08200000, 0x08400000, 0x08600000, 0x08800000, 0x08A00000, 0x08C00000, 0x08E00000, 0x09000000, 0x09200000, 0x09400000, 0x09600000, 0x09800000, 0x09A00000, 0x09C00000,
                    0x09E00000, 0x0D400000, 0x0D800000, 0x0DC00000, 0x0E000000, 0x0E400000, 0x0E800000, 0x0EC00000, 0x0F000000, 0x0F400000, 0x0F800000, 0x0FC00000, 0x13000000, 0x13800000, 0x14000000, 0x14800000,
                    0x15000000, 0x15800000, 0x16000000, 0x16800000, 0x1B000000, 0x1C000000, 0x1D000000, 0x1E000000, 0x1F000000, 0x24000000, 0x26000000, 0x2C000000, 0x38000000, 0x50000000, 0xC0000000, 0xE0000000,
                }};
                constexpr static const add_shifted_type add_shifted_g = {{
                    0xC0000000, 0x60000000, 0x80000000, 0x40000000, 0x30000000, 0x34000000, 0x26000000, 0x28000000, 0x1B000000, 0x1C000000, 0x1D000000, 0x1E000000, 0x1F000000, 0x11800000, 0x12000000, 0x12800000,
                    0x13000000, 0x13800000, 0x14000000, 0x14800000, 0x15000000, 0x15800000, 0x0A800000, 0x0AC00000, 0x0B000000, 0x0B400000, 0x0B800000, 0x0BC00000, 0x0C000000, 0x0C400000, 0x0C800000, 0x0CC00000,
                    0x0D000000, 0x0D400000, 0x0D800000, 0x0DC00000, 0x05400000, 0x05600000, 0x05800000, 0x05A00000, 0x05C00000, 0x05E00000, 0x06000000, 0x06200000, 0x06400000, 0x06600000, 0x06800000, 0x06A00000,
                    0x06C00000, 0x06E00000, 0x07000000, 0x07200000, 0x07400000, 0x07600000, 0x07800000, 0x07A00000, 0x07C00000, 0x07E00000, 0x02100000, 0x02200000, 0x02300000, 0x02400000, 0x02500000, 0x02600000,
                    0x02700000, 0x02800000, 0x02900000, 0x02A00000, 0x02B00000, 0x02C00000, 0x02D00000, 0x02E00000, 0x02F00000, 0x03000000, 0x03100000, 0x03200000, 0x03300000, 0x03400000, 0x03500000, 0x03600000,
                    0x03700000, 0x03800000, 0x00B80000, 0x00C00000, 0x00C80000, 0x00D00000, 0x00D80000, 0x00E00000, 0x00E80000, 0x00F00000, 0x00F80000, 0x01000000, 0x01080000, 0x01100000, 0x01180000, 0x01200000,
                    0x01280000, 0x01300000, 0x01380000, 0x01400000, 0x01480000, 0x01500000, 0x01580000, 0x01600000, 0x01680000, 0x01700000, 0x01780000, 0x01800000, 0x00000000, 0x00040000, 0x00080000, 0x000C0000,
                    0x00100000, 0x00140000, 0x00180000, 0x001C0000, 0x00200000, 0x00240000, 0x00280000, 0x002C0000, 0x00300000, 0x00340000, 0x00380000, 0x003C0000, 0x00400000, 0x00440000, 0x00480000, 0x004C0000,
                    0x00500000, 0x00540000, 0x00580000, 0x005C0000, 0x00600000, 0x00640000, 0x00680000, 0x006C0000, 0x00700000, 0x00740000, 0x00780000, 0x007C0000, 0x00800000, 0x00840000, 0x00880000, 0x008C0000,
                    0x00900000, 0x00940000, 0x00980000, 0x009C0000, 0x00A00000, 0x00A40000, 0x00A80000, 0x00AC0000, 0x00B00000, 0x00B40000, 0x01880000, 0x01900000, 0x01980000, 0x01A00000, 0x01A80000, 0x01B00000,
                    0x01B80000, 0x01C00000, 0x01C80000, 0x01D00000, 0x01D80000, 0x01E00000, 0x01E80000, 0x01F00000, 0x01F80000, 0x02000000, 0x02080000, 0x03900000, 0x03A00000, 0x03B00000, 0x03C00000, 0x03D00000,
                    0x03E00000, 0x03F00000, 0x04000000, 0x04100000, 0x04200000, 0x04300000, 0x04400000, 0x04500000, 0x04600000, 0x04700000, 0x04800000, 0x04900000, 0x04A00000, 0x04B00000, 0x04C00000, 0x04D00000,
                    0x04E00000, 0x04F00000, 0x05000000, 0x05100000, 0x05200000, 0x05300000, 0x08000000, 0x08200000, 0x08400000, 0x08600000, 0x08800000, 0x08A00000, 0x08C00000, 0x08E00000, 0x09000000, 0x09200000,
                    0x09400000, 0x09600000, 0x09800000, 0x09A00000, 0x09C00000, 0x09E00000, 0x0A000000, 0x0A200000, 0x0A400000, 0x0A600000, 0x0E000000, 0x0E400000, 0x0E800000, 0x0EC00000, 0x0F000000, 0x0F400000,
                    0x0F800000, 0x0FC00000, 0x10000000, 0x10400000, 0x10800000, 0x10C00000, 0x11000000, 0x11400000, 0x16000000, 0x16800000, 0x17000000, 0x17800000, 0x18000000, 0x18800000, 0x19000000, 0x19800000,
                    0x1A000000, 0x1A800000, 0x20000000, 0x21000000, 0x22000000, 0x23000000, 0x24000000, 0x25000000, 0x2A000000, 0x2C000000, 0x2E000000, 0x38000000, 0x3C000000, 0x48000000, 0x50000000, 0xA0000000,
                }};
                constexpr static const add_shifted_type add_shifted_r = {{
                    0xC0000000, 0x80000000, 0x40000000, 0x50000000, 0x30000000, 0x28000000, 0x20000000, 0x22000000, 0x17000000, 0x18000000, 0x19000000, 0x1A000000, 0x0F800000, 0x10000000, 0x10800000, 0x11000000,
                    0x11800000, 0x12000000, 0x12800000, 0x0A000000, 0x0A400000, 0x0A800000, 0x0AC00000, 0x0B000000, 0x0B400000, 0x0B800000, 0x0BC00000, 0x0C000000, 0x0C400000, 0x0C800000, 0x05600000, 0x05800000,
                    0x05A00000, 0x05C00000, 0x05E00000, 0x06000000, 0x06200000, 0x06400000, 0x06600000, 0x06800000, 0x06A00000, 0x06C00000, 0x06E00000, 0x07000000, 0x07200000, 0x07400000, 0x07600000, 0x07800000,
                    0x02900000, 0x02A00000, 0x02B00000, 0x02C00000, 0x02D00000, 0x02E00000, 0x02F00000, 0x03000000, 0x03100000, 0x03200000, 0x03300000, 0x03400000, 0x03500000, 0x03600000, 0x03700000, 0x03800000,
                    0x03900000, 0x03A00000, 0x03B00000, 0x03C00000, 0x03D00000, 0x03E00000, 0x03F00000, 0x04000000, 0x00F80000, 0x01000000, 0x01080000, 0x01100000, 0x01180000, 0x01200000, 0x01280000, 0x01300000,
                    0x01380000, 0x01400000, 0x01480000, 0x01500000, 0x01580000, 0x01600000, 0x01680000, 0x01700000, 0x01780000, 0x01800000, 0x01880000, 0x01900000, 0x01980000, 0x01A00000, 0x01A80000, 0x01B00000,
                    0x01B80000, 0x01C00000, 0x01C80000, 0x01D00000, 0x00000000, 0x01D80000, 0x00040000, 0x00080000, 0x000C0000, 0x00100000, 0x00140000, 0x00180000, 0x001C0000, 0x00200000, 0x00240000, 0x00280000,
                    0x002C0000, 0x00300000, 0x00340000, 0x00380000, 0x003C0000, 0x00400000, 0x00440000, 0x00480000, 0x004C0000, 0x00500000, 0x00540000, 0x00580000, 0x005C0000, 0x00600000, 0x00640000, 0x00680000,
                    0x006C0000, 0x00700000, 0x00740000, 0x00780000, 0x007C0000, 0x00800000, 0x00840000, 0x00880000, 0x008C0000, 0x00900000, 0x00940000, 0x00980000, 0x009C0000, 0x00A00000, 0x00A40000, 0x00A80000,
                    0x00AC0000, 0x00B00000, 0x00B40000, 0x00B80000, 0x00BC0000, 0x00C00000, 0x00C40000, 0x00C80000, 0x00CC0000, 0x00D00000, 0x00D40000, 0x00D80000, 0x00DC0000, 0x00E00000, 0x00E40000, 0x00E80000,
                    0x00EC0000, 0x00F00000, 0x00F40000, 0x01E00000, 0x01E80000, 0x01F00000, 0x01F80000, 0x02000000, 0x02080000, 0x02100000, 0x02180000, 0x02200000, 0x02280000, 0x02300000, 0x02380000, 0x02400000,
                    0x02480000, 0x02500000, 0x02580000, 0x02600000, 0x02680000, 0x02700000, 0x02780000, 0x02800000, 0x02880000, 0x04100000, 0x04200000, 0x04300000, 0x04400000, 0x04500000, 0x04600000, 0x04700000,
                    0x04800000, 0x04900000, 0x04A00000, 0x04B00000, 0x04C00000, 0x04D00000, 0x04E00000, 0x04F00000, 0x05000000, 0x05100000, 0x05200000, 0x05300000, 0x05400000, 0x05500000, 0x07A00000, 0x07C00000,
                    0x07E00000, 0x08000000, 0x08200000, 0x08400000, 0x08600000, 0x08800000, 0x08A00000, 0x08C00000, 0x08E00000, 0x09000000, 0x09200000, 0x09400000, 0x09600000, 0x09800000, 0x09A00000, 0x09C00000,
                    0x09E00000, 0x0CC00000, 0x0D000000, 0x0D400000, 0x0D800000, 0x0DC00000, 0x0E000000, 0x0E400000, 0x0E800000, 0x0EC00000, 0x0F000000, 0x0F400000, 0x13000000, 0x13800000, 0x14000000, 0x14800000,
                    0x15000000, 0x15800000, 0x16000000, 0x16800000, 0x1B000000, 0x1C000000, 0x1D000000, 0x1E000000, 0x1F000000, 0x24000000, 0x26000000, 0x2C000000, 0x38000000, 0x60000000, 0x70000000, 0xA0000000,
                }};
            };

            class prediction_left_decorrelate final {
            public:
                constexpr static const shift_type shift_bg = {{
                    0x02, 0x03, 0x03, 0x04, 0x05, 0x06, 0x07, 0x09, 0x09, 0x0A, 0x0B, 0x0C, 0x0C, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
                    0x0F, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x13, 0x12, 0x12, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x14, 0x14,
                    0x14, 0x14, 0x14, 0x15, 0x14, 0x15, 0x15, 0x15, 0x15, 0x15, 0x16, 0x15, 0x16, 0x16, 0x16, 0x17, 0x17, 0x16, 0x18, 0x1A, 0x18, 0x18, 0x19, 0x19, 0x19, 0x19, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x19, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x19, 0x1A, 0x1A, 0x1A, 0x19, 0x19, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x19, 0x19, 0x1A, 0x1A, 0x19,
                    0x19, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x18, 0x19, 0x1A, 0x19, 0x19, 0x1A, 0x1A, 0x18, 0x17, 0x18, 0x19, 0x17, 0x16, 0x16, 0x16, 0x16, 0x16, 0x15, 0x15, 0x15, 0x15, 0x15, 0x14, 0x14, 0x14, 0x14,
                    0x14, 0x14, 0x14, 0x14, 0x14, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x10, 0x10, 0x10, 0x10,
                    0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0D, 0x0D, 0x0D, 0x0C, 0x0B, 0x0B, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x03,
                }};
                constexpr static const shift_type shift_g = {{
                    0x02, 0x03, 0x03, 0x05, 0x06, 0x06, 0x07, 0x07, 0x08, 0x08, 0x08, 0x08, 0x08, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A,
                    0x0A, 0x0A, 0x0A, 0x0A, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,
                    0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D,
                    0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E,
                    0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D,
                    0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,
                    0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A,
                    0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x07, 0x07, 0x07, 0x06, 0x06, 0x05, 0x04, 0x03,
                }};
                constexpr static const shift_type shift_gr = {{
                    0x02, 0x03, 0x03, 0x04, 0x06, 0x06, 0x07, 0x08, 0x09, 0x09, 0x09, 0x09, 0x0A, 0x0A, 0x0B, 0x0B, 0x0B, 0x0C, 0x0C, 0x0D, 0x0D, 0x0D, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0F, 0x0F, 0x0F,
                    0x0F, 0x0F, 0x0F, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x12, 0x11, 0x12, 0x12, 0x11, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12,
                    0x11, 0x12, 0x11, 0x11, 0x11, 0x12, 0x12, 0x12, 0x13, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x18, 0x1A, 0x1A, 0x19, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x19, 0x18, 0x17, 0x17, 0x16, 0x16, 0x15,
                    0x15, 0x14, 0x15, 0x14, 0x14, 0x14, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x12, 0x13, 0x13, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x10, 0x10, 0x10, 0x10,
                    0x10, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0D, 0x0D, 0x0C, 0x0C, 0x0C, 0x0B, 0x0B, 0x0A, 0x0A, 0x0A, 0x0A, 0x09, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x03,
                }};

                constexpr static const add_shifted_type add_shifted_bg = {{
                    0xC0000000, 0x40000000, 0x60000000, 0x20000000, 0x10000000, 0x08000000, 0x04000000, 0x01800000, 0x02000000, 0x01400000, 0x00E00000, 0x00B00000, 0x00C00000, 0x00700000, 0x00780000, 0x00800000,
                    0x00880000, 0x00900000, 0x00380000, 0x003C0000, 0x00400000, 0x00440000, 0x00480000, 0x004C0000, 0x00500000, 0x00540000, 0x00580000, 0x00200000, 0x00220000, 0x00240000, 0x00260000, 0x00280000,
                    0x002A0000, 0x000F0000, 0x00100000, 0x00110000, 0x00120000, 0x00130000, 0x00140000, 0x00078000, 0x00080000, 0x00088000, 0x00090000, 0x00098000, 0x000A0000, 0x000A8000, 0x00038000, 0x0003C000,
                    0x00040000, 0x00044000, 0x00048000, 0x0004C000, 0x0001A000, 0x00050000, 0x00054000, 0x0001C000, 0x0001E000, 0x00020000, 0x00022000, 0x00024000, 0x00026000, 0x00028000, 0x0000B000, 0x0000C000,
                    0x0000D000, 0x0000E000, 0x0000F000, 0x00005000, 0x00010000, 0x00005800, 0x00006000, 0x00006800, 0x00007000, 0x00007800, 0x00002800, 0x00008000, 0x00002C00, 0x00003000, 0x00003400, 0x00002000,
                    0x00002200, 0x00003800, 0x00001A00, 0x00000000, 0x00001B00, 0x00001C00, 0x00001200, 0x00001280, 0x00001300, 0x00001380, 0x00000040, 0x00000080, 0x000000C0, 0x00000100, 0x00000140, 0x00000180,
                    0x000001C0, 0x00000200, 0x00000240, 0x00000280, 0x000002C0, 0x00000300, 0x00000340, 0x00000380, 0x000003C0, 0x00001400, 0x00000400, 0x00000440, 0x00000480, 0x000004C0, 0x00000500, 0x00000540,
                    0x00000580, 0x000005C0, 0x00000600, 0x00000640, 0x00000680, 0x000006C0, 0x00000700, 0x00000740, 0x00000780, 0x000007C0, 0x00000800, 0x00000840, 0x00000880, 0x000008C0, 0x00000900, 0x00000940,
                    0x00000980, 0x000009C0, 0x00000A00, 0x00000A40, 0x00000A80, 0x00000AC0, 0x00000B00, 0x00000B40, 0x00000B80, 0x00000BC0, 0x00000C00, 0x00000C40, 0x00000C80, 0x00000CC0, 0x00000D00, 0x00000D40,
                    0x00001480, 0x00000D80, 0x00000DC0, 0x00000E00, 0x00001500, 0x00001580, 0x00000E40, 0x00000E80, 0x00000EC0, 0x00000F00, 0x00000F40, 0x00001600, 0x00001680, 0x00000F80, 0x00000FC0, 0x00001700,
                    0x00001780, 0x00001000, 0x00001040, 0x00001080, 0x000010C0, 0x00001100, 0x00001D00, 0x00001800, 0x00001140, 0x00001880, 0x00001900, 0x00001180, 0x000011C0, 0x00001E00, 0x00002400, 0x00001F00,
                    0x00001980, 0x00002600, 0x00003C00, 0x00004000, 0x00004400, 0x00004800, 0x00004C00, 0x00008800, 0x00009000, 0x00009800, 0x0000A000, 0x0000A800, 0x00011000, 0x00012000, 0x00013000, 0x00014000,
                    0x00015000, 0x00016000, 0x00017000, 0x00018000, 0x00019000, 0x0002A000, 0x0002C000, 0x0002E000, 0x00030000, 0x00032000, 0x00034000, 0x00036000, 0x00058000, 0x0005C000, 0x00060000, 0x00064000,
                    0x00068000, 0x0006C000, 0x00070000, 0x00074000, 0x000B0000, 0x000B8000, 0x000C0000, 0x000C8000, 0x000D0000, 0x000D8000, 0x000E0000, 0x000E8000, 0x00150000, 0x00160000, 0x00170000, 0x00180000,
                    0x00190000, 0x001A0000, 0x001B0000, 0x001C0000, 0x001D0000, 0x001E0000, 0x001F0000, 0x002C0000, 0x002E0000, 0x00300000, 0x00320000, 0x00340000, 0x00360000, 0x005C0000, 0x00600000, 0x00640000,
                    0x00680000, 0x006C0000, 0x00980000, 0x00A00000, 0x00A80000, 0x00D00000, 0x01000000, 0x01200000, 0x02800000, 0x03000000, 0x06000000, 0x0C000000, 0x18000000, 0x30000000, 0x80000000, 0xA0000000,
                }};
                constexpr static const add_shifted_type add_shifted_g = {{
                    0xC0000000, 0x60000000, 0x80000000, 0x40000000, 0x30000000, 0x34000000, 0x26000000, 0x28000000, 0x1B000000, 0x1C000000, 0x1D000000, 0x1E000000, 0x1F000000, 0x11800000, 0x12000000, 0x12800000,
                    0x13000000, 0x13800000, 0x14000000, 0x14800000, 0x15000000, 0x15800000, 0x0A800000, 0x0AC00000, 0x0B000000, 0x0B400000, 0x0B800000, 0x0BC00000, 0x0C000000, 0x0C400000, 0x0C800000, 0x0CC00000,
                    0x0D000000, 0x0D400000, 0x0D800000, 0x0DC00000, 0x05400000, 0x05600000, 0x05800000, 0x05A00000, 0x05C00000, 0x05E00000, 0x06000000, 0x06200000, 0x06400000, 0x06600000, 0x06800000, 0x06A00000,
                    0x06C00000, 0x06E00000, 0x07000000, 0x07200000, 0x07400000, 0x07600000, 0x07800000, 0x07A00000, 0x07C00000, 0x07E00000, 0x02100000, 0x02200000, 0x02300000, 0x02400000, 0x02500000, 0x02600000,
                    0x02700000, 0x02800000, 0x02900000, 0x02A00000, 0x02B00000, 0x02C00000, 0x02D00000, 0x02E00000, 0x02F00000, 0x03000000, 0x03100000, 0x03200000, 0x03300000, 0x03400000, 0x03500000, 0x03600000,
                    0x03700000, 0x03800000, 0x00B80000, 0x00C00000, 0x00C80000, 0x00D00000, 0x00D80000, 0x00E00000, 0x00E80000, 0x00F00000, 0x00F80000, 0x01000000, 0x01080000, 0x01100000, 0x01180000, 0x01200000,
                    0x01280000, 0x01300000, 0x01380000, 0x01400000, 0x01480000, 0x01500000, 0x01580000, 0x01600000, 0x01680000, 0x01700000, 0x01780000, 0x01800000, 0x00000000, 0x00040000, 0x00080000, 0x000C0000,
                    0x00100000, 0x00140000, 0x00180000, 0x001C0000, 0x00200000, 0x00240000, 0x00280000, 0x002C0000, 0x00300000, 0x00340000, 0x00380000, 0x003C0000, 0x00400000, 0x00440000, 0x00480000, 0x004C0000,
                    0x00500000, 0x00540000, 0x00580000, 0x005C0000, 0x00600000, 0x00640000, 0x00680000, 0x006C0000, 0x00700000, 0x00740000, 0x00780000, 0x007C0000, 0x00800000, 0x00840000, 0x00880000, 0x008C0000,
                    0x00900000, 0x00940000, 0x00980000, 0x009C0000, 0x00A00000, 0x00A40000, 0x00A80000, 0x00AC0000, 0x00B00000, 0x00B40000, 0x01880000, 0x01900000, 0x01980000, 0x01A00000, 0x01A80000, 0x01B00000,
                    0x01B80000, 0x01C00000, 0x01C80000, 0x01D00000, 0x01D80000, 0x01E00000, 0x01E80000, 0x01F00000, 0x01F80000, 0x02000000, 0x02080000, 0x03900000, 0x03A00000, 0x03B00000, 0x03C00000, 0x03D00000,
                    0x03E00000, 0x03F00000, 0x04000000, 0x04100000, 0x04200000, 0x04300000, 0x04400000, 0x04500000, 0x04600000, 0x04700000, 0x04800000, 0x04900000, 0x04A00000, 0x04B00000, 0x04C00000, 0x04D00000,
                    0x04E00000, 0x04F00000, 0x05000000, 0x05100000, 0x05200000, 0x05300000, 0x08000000, 0x08200000, 0x08400000, 0x08600000, 0x08800000, 0x08A00000, 0x08C00000, 0x08E00000, 0x09000000, 0x09200000,
                    0x09400000, 0x09600000, 0x09800000, 0x09A00000, 0x09C00000, 0x09E00000, 0x0A000000, 0x0A200000, 0x0A400000, 0x0A600000, 0x0E000000, 0x0E400000, 0x0E800000, 0x0EC00000, 0x0F000000, 0x0F400000,
                    0x0F800000, 0x0FC00000, 0x10000000, 0x10400000, 0x10800000, 0x10C00000, 0x11000000, 0x11400000, 0x16000000, 0x16800000, 0x17000000, 0x17800000, 0x18000000, 0x18800000, 0x19000000, 0x19800000,
                    0x1A000000, 0x1A800000, 0x20000000, 0x21000000, 0x22000000, 0x23000000, 0x24000000, 0x25000000, 0x2A000000, 0x2C000000, 0x2E000000, 0x38000000, 0x3C000000, 0x48000000, 0x50000000, 0xA0000000,
                }};
                constexpr static const add_shifted_type add_shifted_gr = {{
                    0xC0000000, 0x40000000, 0x60000000, 0x20000000, 0x0C000000, 0x10000000, 0x08000000, 0x06000000, 0x03000000, 0x03800000, 0x04000000, 0x04800000, 0x01800000, 0x01C00000, 0x00E00000, 0x01000000,
                    0x01200000, 0x00900000, 0x00A00000, 0x00680000, 0x00700000, 0x00780000, 0x00340000, 0x00380000, 0x003C0000, 0x00400000, 0x00440000, 0x00480000, 0x004C0000, 0x001E0000, 0x00200000, 0x00220000,
                    0x00240000, 0x00260000, 0x00280000, 0x00120000, 0x00130000, 0x00140000, 0x00150000, 0x00160000, 0x00170000, 0x00180000, 0x00078000, 0x00080000, 0x00088000, 0x00090000, 0x00098000, 0x000A0000,
                    0x000A8000, 0x000B0000, 0x000B8000, 0x00020000, 0x000C0000, 0x00024000, 0x00028000, 0x000C8000, 0x0002C000, 0x00030000, 0x00034000, 0x00038000, 0x0003C000, 0x00040000, 0x00044000, 0x00048000,
                    0x000D0000, 0x0004C000, 0x000D8000, 0x000E0000, 0x000E8000, 0x00050000, 0x00054000, 0x00058000, 0x0000A000, 0x0000C000, 0x00005000, 0x00003000, 0x00002400, 0x00001E00, 0x00001B00, 0x00001C00,
                    0x00000000, 0x00000040, 0x00001A00, 0x00000080, 0x000000C0, 0x00000100, 0x00000140, 0x00000180, 0x000001C0, 0x00000200, 0x00000240, 0x00000280, 0x000002C0, 0x00000300, 0x00000340, 0x00000380,
                    0x000003C0, 0x00000400, 0x00000440, 0x00000480, 0x000004C0, 0x00000500, 0x00000540, 0x00000580, 0x000005C0, 0x00000600, 0x00000640, 0x00000680, 0x000006C0, 0x00000700, 0x00000740, 0x00000780,
                    0x000007C0, 0x00000800, 0x00000840, 0x00000880, 0x000008C0, 0x00000900, 0x00000940, 0x00000980, 0x000009C0, 0x00000A00, 0x00000A40, 0x00000A80, 0x00000AC0, 0x00000B00, 0x00000B40, 0x00000B80,
                    0x00000BC0, 0x00000C00, 0x00000C40, 0x00000C80, 0x00000CC0, 0x00000D00, 0x00000D40, 0x00000D80, 0x00000DC0, 0x00000E00, 0x00000E40, 0x00000E80, 0x00000EC0, 0x00000F00, 0x00000F40, 0x00000F80,
                    0x00000FC0, 0x00001000, 0x00001040, 0x00001080, 0x000010C0, 0x00001100, 0x00001140, 0x00001180, 0x000011C0, 0x00001200, 0x00001240, 0x00001280, 0x000012C0, 0x00001300, 0x00001340, 0x00001380,
                    0x000013C0, 0x00001400, 0x00001440, 0x00001480, 0x000014C0, 0x00001500, 0x00001540, 0x00001580, 0x000015C0, 0x00001600, 0x00001640, 0x00001680, 0x000016C0, 0x00001700, 0x00001740, 0x00001780,
                    0x000017C0, 0x00001800, 0x00001840, 0x00001880, 0x000018C0, 0x00001900, 0x00001940, 0x00001980, 0x000019C0, 0x00001A80, 0x00001D00, 0x00002000, 0x00002200, 0x00002800, 0x00002C00, 0x00003800,
                    0x00004000, 0x00006000, 0x00004800, 0x00007000, 0x00008000, 0x00009000, 0x0000E000, 0x00010000, 0x00012000, 0x00014000, 0x00016000, 0x00018000, 0x0001A000, 0x0005C000, 0x0001C000, 0x0001E000,
                    0x00060000, 0x00064000, 0x00068000, 0x0006C000, 0x00070000, 0x00074000, 0x000F0000, 0x000F8000, 0x00100000, 0x00108000, 0x00110000, 0x00118000, 0x00190000, 0x001A0000, 0x001B0000, 0x001C0000,
                    0x001D0000, 0x002A0000, 0x002C0000, 0x002E0000, 0x00300000, 0x00320000, 0x00500000, 0x00540000, 0x00580000, 0x005C0000, 0x00600000, 0x00640000, 0x00800000, 0x00880000, 0x00B00000, 0x00C00000,
                    0x00D00000, 0x01400000, 0x01600000, 0x02000000, 0x02400000, 0x02800000, 0x02C00000, 0x05000000, 0x05800000, 0x07000000, 0x0A000000, 0x14000000, 0x18000000, 0x30000000, 0x80000000, 0xA0000000,
                }};
            };

            class prediction_gradient_decorrelate final {
            public:
                constexpr static const shift_type shift_bg = {{
                    0x02, 0x03, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x0A, 0x0B, 0x0B, 0x0C, 0x0C, 0x0C, 0x0D, 0x0D, 0x0D, 0x0D, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x10, 0x10, 0x10,
                    0x10, 0x10, 0x10, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x13, 0x13, 0x13, 0x13, 0x13, 0x14, 0x14, 0x14, 0x14, 0x14, 0x15, 0x15, 0x15, 0x15, 0x15,
                    0x16, 0x15, 0x15, 0x15, 0x16, 0x15, 0x16, 0x17, 0x16, 0x17, 0x16, 0x15, 0x17, 0x15, 0x15, 0x17, 0x16, 0x16, 0x17, 0x16, 0x16, 0x19, 0x18, 0x19, 0x17, 0x17, 0x19, 0x18, 0x19, 0x19, 0x18, 0x19,
                    0x19, 0x19, 0x18, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19,
                    0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19,
                    0x19, 0x19, 0x19, 0x19, 0x19, 0x17, 0x19, 0x19, 0x17, 0x19, 0x19, 0x18, 0x18, 0x17, 0x17, 0x17, 0x18, 0x17, 0x17, 0x17, 0x17, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x15, 0x17, 0x16, 0x15, 0x15,
                    0x15, 0x15, 0x15, 0x14, 0x15, 0x15, 0x13, 0x14, 0x13, 0x13, 0x13, 0x13, 0x13, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x10,
                    0x10, 0x10, 0x10, 0x10, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0C, 0x0C, 0x0C, 0x0B, 0x0B, 0x0A, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x03,
                }};
                constexpr static const shift_type shift_g = {{
                    0x02, 0x03, 0x03, 0x05, 0x06, 0x07, 0x07, 0x07, 0x08, 0x08, 0x08, 0x08, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0B,
                    0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D,
                    0x0D, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
                    0x10, 0x10, 0x10, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x12, 0x12, 0x12, 0x12, 0x13, 0x12, 0x13, 0x13, 0x13, 0x13, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x15, 0x14, 0x15, 0x14, 0x14, 0x14,
                    0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x13, 0x14, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                    0x11, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E,
                    0x0E, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B,
                    0x0B, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x08, 0x08, 0x08, 0x08, 0x08, 0x07, 0x07, 0x07, 0x06, 0x05, 0x03, 0x03,
                }};
                constexpr static const shift_type shift_gr = {{
                    0x02, 0x03, 0x03, 0x04, 0x06, 0x07, 0x08, 0x0A, 0x0B, 0x0B, 0x0C, 0x0C, 0x0C, 0x0D, 0x0D, 0x0D, 0x0D, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x10, 0x10, 0x10, 0x10,
                    0x10, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x12, 0x12, 0x12, 0x12, 0x12, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x14, 0x14, 0x14, 0x14, 0x15, 0x14, 0x15, 0x16, 0x16, 0x16, 0x17, 0x16, 0x16, 0x16,
                    0x17, 0x17, 0x18, 0x18, 0x17, 0x19, 0x18, 0x18, 0x17, 0x18, 0x19, 0x17, 0x18, 0x18, 0x19, 0x18, 0x19, 0x18, 0x18, 0x19, 0x19, 0x19, 0x19, 0x18, 0x19, 0x19, 0x18, 0x19, 0x19, 0x19, 0x18, 0x19,
                    0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19,
                    0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19,
                    0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x18, 0x18, 0x17, 0x17, 0x16, 0x16, 0x15, 0x16, 0x15, 0x15, 0x14, 0x15, 0x15, 0x14, 0x14, 0x14, 0x14, 0x15, 0x14, 0x14,
                    0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x12, 0x13, 0x13, 0x13, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                    0x11, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x0F, 0x0F, 0x0F, 0x0E, 0x0E, 0x0E, 0x0E, 0x0D, 0x0D, 0x0D, 0x0D, 0x0C, 0x0C, 0x0C, 0x0C, 0x0B, 0x0B, 0x0A, 0x08, 0x07, 0x06, 0x03, 0x03, 0x03,
                }};

                constexpr static const add_shifted_type add_shifted_bg = {{
                    0xC0000000, 0x40000000, 0x60000000, 0x20000000, 0x10000000, 0x08000000, 0x04000000, 0x02000000, 0x01800000, 0x01000000, 0x01200000, 0x00A00000, 0x00B00000, 0x00C00000, 0x00580000, 0x00600000,
                    0x00680000, 0x00700000, 0x00300000, 0x00340000, 0x00380000, 0x003C0000, 0x00400000, 0x001A0000, 0x001C0000, 0x001E0000, 0x00200000, 0x00220000, 0x00240000, 0x000F0000, 0x00100000, 0x00110000,
                    0x00120000, 0x00130000, 0x00140000, 0x00070000, 0x00078000, 0x00080000, 0x00088000, 0x00090000, 0x00098000, 0x000A0000, 0x000A8000, 0x00030000, 0x00034000, 0x00038000, 0x0003C000, 0x00040000,
                    0x00044000, 0x0001A000, 0x0001C000, 0x0001E000, 0x00020000, 0x00022000, 0x00013000, 0x00014000, 0x00015000, 0x00016000, 0x00017000, 0x00009000, 0x00009800, 0x0000A000, 0x0000A800, 0x0000B000,
                    0x00005000, 0x0000B800, 0x0000C000, 0x0000C800, 0x00005400, 0x0000D000, 0x00005800, 0x00002E00, 0x00005C00, 0x00003000, 0x00006000, 0x0000D800, 0x00003200, 0x0000E000, 0x0000E800, 0x00003400,
                    0x00006400, 0x00006800, 0x00003600, 0x00006C00, 0x00007000, 0x00000000, 0x00002700, 0x00000080, 0x00003800, 0x00003A00, 0x00000100, 0x00002800, 0x00000180, 0x00000200, 0x00002900, 0x00000280,
                    0x00000300, 0x00000380, 0x00002A00, 0x00000400, 0x00000480, 0x00000500, 0x00000580, 0x00000600, 0x00000680, 0x00000700, 0x00000780, 0x00000800, 0x00000880, 0x00000900, 0x00000980, 0x00000A00,
                    0x00000A80, 0x00000B00, 0x00000B80, 0x00000C00, 0x00000C80, 0x00000D00, 0x00000D80, 0x00000E00, 0x00000E80, 0x00000F00, 0x00000F80, 0x00001000, 0x00001080, 0x00001100, 0x00001180, 0x00001200,
                    0x00001280, 0x00001300, 0x00001380, 0x00001400, 0x00001480, 0x00001500, 0x00001580, 0x00001600, 0x00001680, 0x00001700, 0x00001780, 0x00001800, 0x00001880, 0x00001900, 0x00001980, 0x00001A00,
                    0x00001A80, 0x00001B00, 0x00001B80, 0x00001C00, 0x00001C80, 0x00001D00, 0x00001D80, 0x00001E00, 0x00001E80, 0x00001F00, 0x00001F80, 0x00002000, 0x00002080, 0x00002100, 0x00002180, 0x00002200,
                    0x00002280, 0x00002300, 0x00002380, 0x00002400, 0x00002480, 0x00003C00, 0x00002500, 0x00002580, 0x00003E00, 0x00002600, 0x00002680, 0x00002B00, 0x00002C00, 0x00004000, 0x00004200, 0x00004400,
                    0x00002D00, 0x00004600, 0x00004800, 0x00004A00, 0x00004C00, 0x00007400, 0x00007800, 0x00007C00, 0x00008000, 0x00008400, 0x00008800, 0x0000F000, 0x00004E00, 0x00008C00, 0x0000F800, 0x00010000,
                    0x00010800, 0x00011000, 0x00011800, 0x00018000, 0x00012000, 0x00012800, 0x00024000, 0x00019000, 0x00026000, 0x00028000, 0x0002A000, 0x0002C000, 0x0002E000, 0x00048000, 0x0004C000, 0x00050000,
                    0x00054000, 0x00058000, 0x0005C000, 0x00060000, 0x00064000, 0x00068000, 0x0006C000, 0x000B0000, 0x000B8000, 0x000C0000, 0x000C8000, 0x000D0000, 0x000D8000, 0x000E0000, 0x000E8000, 0x00150000,
                    0x00160000, 0x00170000, 0x00180000, 0x00190000, 0x00260000, 0x00280000, 0x002A0000, 0x002C0000, 0x002E0000, 0x00440000, 0x00480000, 0x004C0000, 0x00500000, 0x00540000, 0x00780000, 0x00800000,
                    0x00880000, 0x00900000, 0x00980000, 0x00D00000, 0x00E00000, 0x00F00000, 0x01400000, 0x01600000, 0x01C00000, 0x03000000, 0x06000000, 0x0C000000, 0x18000000, 0x30000000, 0x80000000, 0xA0000000,
                }};
                constexpr static const add_shifted_type add_shifted_g = {{
                    0xC0000000, 0x40000000, 0x60000000, 0x30000000, 0x28000000, 0x1C000000, 0x1E000000, 0x20000000, 0x13000000, 0x14000000, 0x15000000, 0x16000000, 0x0B800000, 0x0C000000, 0x0C800000, 0x0D000000,
                    0x0D800000, 0x0E000000, 0x0E800000, 0x0F000000, 0x05C00000, 0x06000000, 0x06400000, 0x06800000, 0x06C00000, 0x07000000, 0x07400000, 0x07800000, 0x07C00000, 0x08000000, 0x08400000, 0x02800000,
                    0x02A00000, 0x02C00000, 0x02E00000, 0x03000000, 0x03200000, 0x03400000, 0x03600000, 0x03800000, 0x03A00000, 0x03C00000, 0x03E00000, 0x04000000, 0x01400000, 0x01500000, 0x01600000, 0x01700000,
                    0x01800000, 0x01900000, 0x01A00000, 0x01B00000, 0x01C00000, 0x01D00000, 0x01E00000, 0x00A00000, 0x00A80000, 0x00B00000, 0x00B80000, 0x00C00000, 0x00C80000, 0x00D00000, 0x00D80000, 0x00E00000,
                    0x00E80000, 0x00500000, 0x00540000, 0x00580000, 0x005C0000, 0x00600000, 0x00640000, 0x00680000, 0x006C0000, 0x00700000, 0x00740000, 0x00780000, 0x00260000, 0x00280000, 0x002A0000, 0x002C0000,
                    0x002E0000, 0x00300000, 0x00320000, 0x00340000, 0x00360000, 0x00380000, 0x000D0000, 0x000E0000, 0x000F0000, 0x00100000, 0x00110000, 0x00120000, 0x00130000, 0x00140000, 0x00150000, 0x00160000,
                    0x00170000, 0x00180000, 0x00190000, 0x00068000, 0x00070000, 0x00078000, 0x00080000, 0x00088000, 0x00090000, 0x00030000, 0x00034000, 0x00038000, 0x0003C000, 0x00014000, 0x00040000, 0x00016000,
                    0x00018000, 0x0001A000, 0x0001C000, 0x00001000, 0x00002000, 0x00003000, 0x00004000, 0x00005000, 0x00006000, 0x00007000, 0x00000000, 0x00008000, 0x00000800, 0x00009000, 0x0000A000, 0x0000B000,
                    0x0000C000, 0x0000D000, 0x0000E000, 0x0000F000, 0x00010000, 0x00011000, 0x00012000, 0x0001E000, 0x00013000, 0x00020000, 0x00022000, 0x00024000, 0x00026000, 0x00028000, 0x0002A000, 0x0002C000,
                    0x0002E000, 0x00044000, 0x00048000, 0x0004C000, 0x00050000, 0x00054000, 0x00058000, 0x0005C000, 0x00060000, 0x00064000, 0x00098000, 0x000A0000, 0x000A8000, 0x000B0000, 0x000B8000, 0x000C0000,
                    0x000C8000, 0x001A0000, 0x001B0000, 0x001C0000, 0x001D0000, 0x001E0000, 0x001F0000, 0x00200000, 0x00210000, 0x00220000, 0x00230000, 0x00240000, 0x00250000, 0x003A0000, 0x003C0000, 0x003E0000,
                    0x00400000, 0x00420000, 0x00440000, 0x00460000, 0x00480000, 0x004A0000, 0x004C0000, 0x004E0000, 0x007C0000, 0x00800000, 0x00840000, 0x00880000, 0x008C0000, 0x00900000, 0x00940000, 0x00980000,
                    0x009C0000, 0x00F00000, 0x00F80000, 0x01000000, 0x01080000, 0x01100000, 0x01180000, 0x01200000, 0x01280000, 0x01300000, 0x01380000, 0x01F00000, 0x02000000, 0x02100000, 0x02200000, 0x02300000,
                    0x02400000, 0x02500000, 0x02600000, 0x02700000, 0x04200000, 0x04400000, 0x04600000, 0x04800000, 0x04A00000, 0x04C00000, 0x04E00000, 0x05000000, 0x05200000, 0x05400000, 0x05600000, 0x05800000,
                    0x05A00000, 0x08800000, 0x08C00000, 0x09000000, 0x09400000, 0x09800000, 0x09C00000, 0x0A000000, 0x0A400000, 0x0A800000, 0x0AC00000, 0x0B000000, 0x0B400000, 0x0F800000, 0x10000000, 0x10800000,
                    0x11000000, 0x11800000, 0x12000000, 0x12800000, 0x17000000, 0x18000000, 0x19000000, 0x1A000000, 0x1B000000, 0x22000000, 0x24000000, 0x26000000, 0x2C000000, 0x38000000, 0x80000000, 0xA0000000,
                }};
                constexpr static const add_shifted_type add_shifted_gr = {{
                    0xC0000000, 0x20000000, 0x40000000, 0x10000000, 0x08000000, 0x04000000, 0x02000000, 0x01800000, 0x01000000, 0x01200000, 0x00900000, 0x00A00000, 0x00B00000, 0x00500000, 0x00580000, 0x00600000,
                    0x00680000, 0x002C0000, 0x00300000, 0x00340000, 0x00380000, 0x003C0000, 0x001A0000, 0x001C0000, 0x001E0000, 0x00200000, 0x00220000, 0x00240000, 0x000E0000, 0x000F0000, 0x00100000, 0x00110000,
                    0x00120000, 0x00078000, 0x00080000, 0x00088000, 0x00090000, 0x00098000, 0x000A0000, 0x0003C000, 0x00040000, 0x00044000, 0x00048000, 0x0004C000, 0x0001E000, 0x00020000, 0x00022000, 0x00024000,
                    0x00026000, 0x00028000, 0x0000B000, 0x0000C000, 0x0000D000, 0x0000E000, 0x00007000, 0x0000F000, 0x00007800, 0x00004C00, 0x00005000, 0x00005400, 0x00003C00, 0x00005800, 0x00005C00, 0x00006000,
                    0x00003E00, 0x00004000, 0x00002D00, 0x00002E00, 0x00004200, 0x00000000, 0x00002F00, 0x00003000, 0x00004400, 0x00003100, 0x00000080, 0x00004600, 0x00003200, 0x00003300, 0x00000100, 0x00003400,
                    0x00000180, 0x00003500, 0x00003600, 0x00000200, 0x00000280, 0x00000300, 0x00000380, 0x00003700, 0x00000400, 0x00000480, 0x00003800, 0x00000500, 0x00000580, 0x00000600, 0x00003900, 0x00000680,
                    0x00000700, 0x00000780, 0x00000800, 0x00000880, 0x00000900, 0x00000980, 0x00000A00, 0x00000A80, 0x00000B00, 0x00000B80, 0x00000C00, 0x00000C80, 0x00000D00, 0x00000D80, 0x00000E00, 0x00000E80,
                    0x00000F00, 0x00000F80, 0x00001000, 0x00001080, 0x00001100, 0x00001180, 0x00001200, 0x00001280, 0x00001300, 0x00001380, 0x00001400, 0x00001480, 0x00001500, 0x00001580, 0x00001600, 0x00001680,
                    0x00001700, 0x00001780, 0x00001800, 0x00001880, 0x00001900, 0x00001980, 0x00001A00, 0x00001A80, 0x00001B00, 0x00001B80, 0x00001C00, 0x00001C80, 0x00001D00, 0x00001D80, 0x00001E00, 0x00001E80,
                    0x00001F00, 0x00001F80, 0x00002000, 0x00002080, 0x00002100, 0x00002180, 0x00002200, 0x00002280, 0x00002300, 0x00002380, 0x00002400, 0x00002480, 0x00002500, 0x00002580, 0x00002600, 0x00002680,
                    0x00002700, 0x00002780, 0x00002800, 0x00002880, 0x00002900, 0x00002980, 0x00002A00, 0x00002A80, 0x00002B00, 0x00002B80, 0x00002C00, 0x00002C80, 0x00003A00, 0x00003B00, 0x00004800, 0x00004A00,
                    0x00006400, 0x00006800, 0x00008000, 0x00006C00, 0x00008800, 0x00009000, 0x00010000, 0x00009800, 0x0000A000, 0x00011000, 0x00012000, 0x00013000, 0x00014000, 0x0000A800, 0x00015000, 0x00016000,
                    0x00017000, 0x00018000, 0x00019000, 0x0001A000, 0x0001B000, 0x0001C000, 0x0001D000, 0x0002A000, 0x0002C000, 0x0002E000, 0x00030000, 0x00032000, 0x00034000, 0x00050000, 0x00036000, 0x00038000,
                    0x0003A000, 0x00054000, 0x00058000, 0x0005C000, 0x00060000, 0x00064000, 0x00068000, 0x0006C000, 0x00070000, 0x00074000, 0x000A8000, 0x000B0000, 0x000B8000, 0x000C0000, 0x000C8000, 0x000D0000,
                    0x000D8000, 0x00130000, 0x00140000, 0x00150000, 0x00160000, 0x00170000, 0x00180000, 0x00190000, 0x00260000, 0x00280000, 0x002A0000, 0x00400000, 0x00440000, 0x00480000, 0x004C0000, 0x00700000,
                    0x00780000, 0x00800000, 0x00880000, 0x00C00000, 0x00D00000, 0x00E00000, 0x00F00000, 0x01400000, 0x01600000, 0x01C00000, 0x03000000, 0x06000000, 0x0C000000, 0x60000000, 0x80000000, 0xA0000000,
                }};
            };
        };

        class yuv final {
        public:
            class classic final {
            public:
                constexpr static const shift_type shift_y = {{
                    0x02, 0x04, 0x03, 0x05, 0x05, 0x07, 0x07, 0x07, 0x07, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
                    0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B,
                    0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0D,
                    0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
                    0x10, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x0F,
                    0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B,
                    0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
                    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x06, 0x06, 0x05, 0x05, 0x04, 0x04,
                }};
                constexpr static const shift_type shift_u = {{
                    0x02, 0x02, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0B, 0x0B, 0x0C, 0x0C, 0x0D, 0x0D, 0x0E, 0x0E, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x10, 0x10, 0x10, 0x10, 0x11, 0x11, 0x12, 0x12,
                    0x13, 0x13, 0x14, 0x14, 0x15, 0x15, 0x16, 0x16, 0x16, 0x17, 0x17, 0x17, 0x17, 0x17, 0x18, 0x19, 0x18, 0x18, 0x19, 0x19, 0x18, 0x19, 0x19, 0x1A, 0x1A, 0x1A, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x19, 0x18, 0x1A, 0x19, 0x1A, 0x19, 0x18, 0x18, 0x18, 0x18, 0x18, 0x17, 0x17, 0x17, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x15,
                    0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x14, 0x14, 0x14, 0x13, 0x13, 0x12, 0x12, 0x11, 0x10, 0x10, 0x0F, 0x0F, 0x0E, 0x0E, 0x0D, 0x0D, 0x0C, 0x0B, 0x0B, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x02,
                }};
                constexpr static const shift_type shift_v = {{
                    0x02, 0x02, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0B, 0x0B, 0x0C, 0x0C, 0x0D, 0x0D, 0x0E, 0x0E, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x10, 0x10, 0x10, 0x10, 0x11, 0x11, 0x12, 0x12,
                    0x13, 0x13, 0x14, 0x14, 0x15, 0x15, 0x16, 0x16, 0x16, 0x17, 0x17, 0x17, 0x17, 0x17, 0x18, 0x19, 0x18, 0x18, 0x19, 0x19, 0x18, 0x19, 0x19, 0x1A, 0x1A, 0x1A, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x19, 0x18, 0x1A, 0x19, 0x1A, 0x19, 0x18, 0x18, 0x18, 0x18, 0x18, 0x17, 0x17, 0x17, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x15,
                    0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x14, 0x14, 0x14, 0x13, 0x13, 0x12, 0x12, 0x11, 0x10, 0x10, 0x0F, 0x0F, 0x0E, 0x0E, 0x0D, 0x0D, 0x0C, 0x0B, 0x0B, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x02,
                }};

                constexpr static const add_shifted_type add_shifted_y = {{
                    0xC0000000, 0x90000000, 0xA0000000, 0x60000000, 0x50000000, 0x46000000, 0x40000000, 0x3A000000, 0x36000000, 0x32000000, 0x30000000, 0x2D000000, 0x2C000000, 0x29000000, 0x27000000, 0x25000000,
                    0x24800000, 0x23000000, 0x22000000, 0x20800000, 0x20000000, 0x1E800000, 0x1D000000, 0x1C000000, 0x1A800000, 0x19000000, 0x18800000, 0x17000000, 0x16000000, 0x14800000, 0x13000000, 0x12000000,
                    0x11000000, 0x10400000, 0x0FC00000, 0x0F400000, 0x0E800000, 0x0DC00000, 0x0D400000, 0x0CC00000, 0x0C000000, 0x0B800000, 0x0B400000, 0x0AC00000, 0x0A400000, 0x09C00000, 0x09800000, 0x09000000,
                    0x08C00000, 0x08400000, 0x08000000, 0x07800000, 0x07400000, 0x06C00000, 0x06800000, 0x06400000, 0x06000000, 0x05E00000, 0x05C00000, 0x05800000, 0x05600000, 0x05200000, 0x05000000, 0x04E00000,
                    0x04A00000, 0x04800000, 0x04600000, 0x04400000, 0x04000000, 0x03E00000, 0x03C00000, 0x03800000, 0x03600000, 0x03400000, 0x03000000, 0x02E00000, 0x02C00000, 0x02800000, 0x02600000, 0x02500000,
                    0x02300000, 0x02200000, 0x02100000, 0x01F00000, 0x01E00000, 0x01D00000, 0x01B00000, 0x01A00000, 0x01800000, 0x01700000, 0x01500000, 0x01400000, 0x01200000, 0x01100000, 0x00F00000, 0x00E80000,
                    0x00D80000, 0x00D00000, 0x00C00000, 0x00B00000, 0x00A80000, 0x00980000, 0x00880000, 0x00800000, 0x00700000, 0x00680000, 0x00640000, 0x005C0000, 0x00540000, 0x004C0000, 0x00480000, 0x00400000,
                    0x003C0000, 0x00360000, 0x00320000, 0x002E0000, 0x002A0000, 0x00260000, 0x00220000, 0x00200000, 0x001C0000, 0x001A0000, 0x00190000, 0x00170000, 0x00150000, 0x00120000, 0x00110000, 0x000E0000,
                    0x000C0000, 0x00088000, 0x00098000, 0x00068000, 0x00020000, 0x00048000, 0x00010000, 0x00058000, 0x00008000, 0x00038000, 0x00040000, 0x00000000, 0x00080000, 0x00018000, 0x00070000, 0x00030000,
                    0x00060000, 0x00050000, 0x00028000, 0x00078000, 0x00090000, 0x000B0000, 0x000A0000, 0x000D0000, 0x000F0000, 0x00100000, 0x00130000, 0x00140000, 0x00160000, 0x00180000, 0x001B0000, 0x001E0000,
                    0x00240000, 0x00280000, 0x002C0000, 0x00300000, 0x00340000, 0x00380000, 0x00440000, 0x00500000, 0x00580000, 0x00600000, 0x006C0000, 0x00780000, 0x00900000, 0x00A00000, 0x00B80000, 0x00C80000,
                    0x00E00000, 0x01000000, 0x01300000, 0x01600000, 0x01900000, 0x01C00000, 0x02000000, 0x02400000, 0x02A00000, 0x03200000, 0x03A00000, 0x04200000, 0x04C00000, 0x05400000, 0x05A00000, 0x06200000,
                    0x07000000, 0x07C00000, 0x08800000, 0x09400000, 0x0A000000, 0x0A800000, 0x0B000000, 0x0BC00000, 0x0C400000, 0x0C800000, 0x0D000000, 0x0D800000, 0x0E000000, 0x0E400000, 0x0EC00000, 0x0F000000,
                    0x0F800000, 0x10000000, 0x10800000, 0x10C00000, 0x11400000, 0x11800000, 0x12800000, 0x13800000, 0x14000000, 0x15000000, 0x15800000, 0x16800000, 0x17800000, 0x18000000, 0x19800000, 0x1A000000,
                    0x1B000000, 0x1B800000, 0x1C800000, 0x1D800000, 0x1E000000, 0x1F000000, 0x1F800000, 0x21000000, 0x21800000, 0x22800000, 0x23800000, 0x24000000, 0x26000000, 0x28000000, 0x2A000000, 0x2B000000,
                    0x2E000000, 0x2F000000, 0x31000000, 0x33000000, 0x34000000, 0x38000000, 0x3C000000, 0x3E000000, 0x42000000, 0x44000000, 0x48000000, 0x4C000000, 0x58000000, 0x68000000, 0x70000000, 0x80000000,
                }};
                constexpr static const add_shifted_type add_shifted_u = {{
                    0xC0000000, 0x40000000, 0x20000000, 0x10000000, 0x08000000, 0x04000000, 0x03000000, 0x01800000, 0x00E00000, 0x00A00000, 0x00700000, 0x00500000, 0x00400000, 0x00300000, 0x002C0000, 0x00240000,
                    0x001C0000, 0x001A0000, 0x00160000, 0x00140000, 0x00120000, 0x00100000, 0x000E0000, 0x000A0000, 0x00090000, 0x00070000, 0x00060000, 0x00040000, 0x00038000, 0x00028000, 0x00020000, 0x0001C000,
                    0x00016000, 0x00010000, 0x0000D000, 0x0000B000, 0x00009800, 0x00007800, 0x00005800, 0x00005C00, 0x00005000, 0x00004200, 0x00004000, 0x00003800, 0x00003600, 0x00003A00, 0x00003300, 0x00002680,
                    0x00002B00, 0x00002D00, 0x00002600, 0x00002880, 0x00002E00, 0x00002900, 0x00002580, 0x00000DC0, 0x00000E00, 0x00002400, 0x00000E80, 0x00002800, 0x00000F00, 0x00002500, 0x000024C0, 0x00000FC0,
                    0x000023C0, 0x00001040, 0x00001080, 0x000010C0, 0x00001100, 0x00001140, 0x00001180, 0x000011C0, 0x00001200, 0x00001240, 0x00001280, 0x000012C0, 0x00001300, 0x00001340, 0x00001380, 0x000013C0,
                    0x00001400, 0x00001440, 0x00001480, 0x000014C0, 0x00001500, 0x00001540, 0x00001580, 0x000015C0, 0x00001600, 0x00001640, 0x00001680, 0x000016C0, 0x000006C0, 0x00000780, 0x00000540, 0x00000580,
                    0x00000440, 0x00000380, 0x00000140, 0x00000180, 0x00001900, 0x00000D80, 0x00000BC0, 0x00000C80, 0x00000CC0, 0x00000D40, 0x00001A80, 0x00001AC0, 0x00001B00, 0x00001B40, 0x00001B80, 0x00001BC0,
                    0x00001C00, 0x00001C40, 0x00001C80, 0x00001CC0, 0x00000100, 0x00001D40, 0x00001D80, 0x00001700, 0x00001780, 0x00001E40, 0x00001E80, 0x000000C0, 0x00001F00, 0x000019C0, 0x00000080, 0x00000040,
                    0x00000000, 0x00002040, 0x00002080, 0x000020C0, 0x00001E00, 0x00001DC0, 0x00001F80, 0x00001F40, 0x00002200, 0x00002240, 0x00002280, 0x000022C0, 0x00002300, 0x00002340, 0x00002380, 0x00002180,
                    0x000021C0, 0x00002100, 0x00002140, 0x00001A00, 0x00001000, 0x00001940, 0x00000F80, 0x00000E40, 0x00001980, 0x000017C0, 0x00001740, 0x00000EC0, 0x00000F40, 0x00000700, 0x00001840, 0x00001800,
                    0x00000D00, 0x00000C40, 0x00000C00, 0x00000740, 0x00000800, 0x00000640, 0x00000600, 0x00000B80, 0x000005C0, 0x00001880, 0x00000B40, 0x00000B00, 0x00000AC0, 0x00000500, 0x00000A80, 0x00000A40,
                    0x000004C0, 0x00000480, 0x000018C0, 0x00000A00, 0x000003C0, 0x000009C0, 0x00000980, 0x00000400, 0x00000340, 0x00000300, 0x000002C0, 0x00000940, 0x00000280, 0x00000240, 0x00000200, 0x00000900,
                    0x000001C0, 0x00002000, 0x00001FC0, 0x00001A40, 0x00001EC0, 0x00001D00, 0x000008C0, 0x00000880, 0x00000840, 0x00002440, 0x000007C0, 0x00002780, 0x00002A00, 0x00002480, 0x00002700, 0x00000680,
                    0x00002980, 0x00003000, 0x00003100, 0x00003200, 0x00002C00, 0x00002F00, 0x00003400, 0x00003E00, 0x00003C00, 0x00004800, 0x00004400, 0x00004C00, 0x00005400, 0x00006000, 0x00006400, 0x00006800,
                    0x00007000, 0x00008000, 0x00008800, 0x00009000, 0x0000A000, 0x0000A800, 0x0000C000, 0x0000E000, 0x0000F000, 0x00012000, 0x00014000, 0x00018000, 0x00024000, 0x00030000, 0x00050000, 0x00080000,
                    0x000C0000, 0x00180000, 0x00200000, 0x00280000, 0x00380000, 0x00480000, 0x00600000, 0x00800000, 0x00C00000, 0x01000000, 0x02000000, 0x06000000, 0x0C000000, 0x18000000, 0x30000000, 0x80000000,
                }};
                constexpr static const add_shifted_type add_shifted_v = {{
                    0xC0000000, 0x40000000, 0x20000000, 0x10000000, 0x08000000, 0x04000000, 0x03000000, 0x01800000, 0x00E00000, 0x00A00000, 0x00700000, 0x00500000, 0x00400000, 0x00300000, 0x002C0000, 0x00240000,
                    0x001C0000, 0x001A0000, 0x00160000, 0x00140000, 0x00120000, 0x00100000, 0x000E0000, 0x000A0000, 0x00090000, 0x00070000, 0x00060000, 0x00040000, 0x00038000, 0x00028000, 0x00020000, 0x0001C000,
                    0x00016000, 0x00010000, 0x0000D000, 0x0000B000, 0x00009800, 0x00007800, 0x00005800, 0x00005C00, 0x00005000, 0x00004200, 0x00004000, 0x00003800, 0x00003600, 0x00003A00, 0x00003300, 0x00002680,
                    0x00002B00, 0x00002D00, 0x00002600, 0x00002880, 0x00002E00, 0x00002900, 0x00002580, 0x00000DC0, 0x00000E00, 0x00002400, 0x00000E80, 0x00002800, 0x00000F00, 0x00002500, 0x000024C0, 0x00000FC0,
                    0x000023C0, 0x00001040, 0x00001080, 0x000010C0, 0x00001100, 0x00001140, 0x00001180, 0x000011C0, 0x00001200, 0x00001240, 0x00001280, 0x000012C0, 0x00001300, 0x00001340, 0x00001380, 0x000013C0,
                    0x00001400, 0x00001440, 0x00001480, 0x000014C0, 0x00001500, 0x00001540, 0x00001580, 0x000015C0, 0x00001600, 0x00001640, 0x00001680, 0x000016C0, 0x000006C0, 0x00000780, 0x00000540, 0x00000580,
                    0x00000440, 0x00000380, 0x00000140, 0x00000180, 0x00001900, 0x00000D80, 0x00000BC0, 0x00000C80, 0x00000CC0, 0x00000D40, 0x00001A80, 0x00001AC0, 0x00001B00, 0x00001B40, 0x00001B80, 0x00001BC0,
                    0x00001C00, 0x00001C40, 0x00001C80, 0x00001CC0, 0x00000100, 0x00001D40, 0x00001D80, 0x00001700, 0x00001780, 0x00001E40, 0x00001E80, 0x000000C0, 0x00001F00, 0x000019C0, 0x00000080, 0x00000040,
                    0x00000000, 0x00002040, 0x00002080, 0x000020C0, 0x00001E00, 0x00001DC0, 0x00001F80, 0x00001F40, 0x00002200, 0x00002240, 0x00002280, 0x000022C0, 0x00002300, 0x00002340, 0x00002380, 0x00002180,
                    0x000021C0, 0x00002100, 0x00002140, 0x00001A00, 0x00001000, 0x00001940, 0x00000F80, 0x00000E40, 0x00001980, 0x000017C0, 0x00001740, 0x00000EC0, 0x00000F40, 0x00000700, 0x00001840, 0x00001800,
                    0x00000D00, 0x00000C40, 0x00000C00, 0x00000740, 0x00000800, 0x00000640, 0x00000600, 0x00000B80, 0x000005C0, 0x00001880, 0x00000B40, 0x00000B00, 0x00000AC0, 0x00000500, 0x00000A80, 0x00000A40,
                    0x000004C0, 0x00000480, 0x000018C0, 0x00000A00, 0x000003C0, 0x000009C0, 0x00000980, 0x00000400, 0x00000340, 0x00000300, 0x000002C0, 0x00000940, 0x00000280, 0x00000240, 0x00000200, 0x00000900,
                    0x000001C0, 0x00002000, 0x00001FC0, 0x00001A40, 0x00001EC0, 0x00001D00, 0x000008C0, 0x00000880, 0x00000840, 0x00002440, 0x000007C0, 0x00002780, 0x00002A00, 0x00002480, 0x00002700, 0x00000680,
                    0x00002980, 0x00003000, 0x00003100, 0x00003200, 0x00002C00, 0x00002F00, 0x00003400, 0x00003E00, 0x00003C00, 0x00004800, 0x00004400, 0x00004C00, 0x00005400, 0x00006000, 0x00006400, 0x00006800,
                    0x00007000, 0x00008000, 0x00008800, 0x00009000, 0x0000A000, 0x0000A800, 0x0000C000, 0x0000E000, 0x0000F000, 0x00012000, 0x00014000, 0x00018000, 0x00024000, 0x00030000, 0x00050000, 0x00080000,
                    0x000C0000, 0x00180000, 0x00200000, 0x00280000, 0x00380000, 0x00480000, 0x00600000, 0x00800000, 0x00C00000, 0x01000000, 0x02000000, 0x06000000, 0x0C000000, 0x18000000, 0x30000000, 0x80000000,
                }};
            };

            class prediction_left final {
            public:
                constexpr static const shift_type shift_y = {{
                    0x02, 0x02, 0x04, 0x05, 0x06, 0x07, 0x07, 0x08, 0x08, 0x08, 0x08, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0B, 0x0B,
                    0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,
                    0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E,
                    0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x11, 0x11,
                    0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0E, 0x0F, 0x0E, 0x0E, 0x0E,
                    0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,
                    0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B,
                    0x0B, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x07, 0x07, 0x06, 0x05, 0x04, 0x03,
                }};
                constexpr static const shift_type shift_u = {{
                    0x02, 0x02, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0B, 0x0C, 0x0D, 0x0D, 0x0E, 0x0E, 0x0F, 0x0F, 0x10, 0x10, 0x11, 0x11, 0x12, 0x12, 0x12, 0x13, 0x13, 0x14, 0x15, 0x15, 0x15, 0x15,
                    0x16, 0x16, 0x17, 0x17, 0x19, 0x19, 0x19, 0x19, 0x19, 0x1A, 0x19, 0x19, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x19, 0x1A, 0x1A, 0x1A, 0x19, 0x1A, 0x1A, 0x19, 0x17, 0x17, 0x16, 0x17, 0x16, 0x16, 0x16, 0x16, 0x15, 0x16, 0x15, 0x15, 0x15, 0x15,
                    0x14, 0x14, 0x14, 0x13, 0x13, 0x13, 0x12, 0x12, 0x12, 0x11, 0x11, 0x10, 0x10, 0x10, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0E, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x0A, 0x08, 0x07, 0x06, 0x05, 0x04, 0x02,
                }};
                constexpr static const shift_type shift_v = {{
                    0x02, 0x02, 0x04, 0x05, 0x07, 0x07, 0x08, 0x09, 0x09, 0x0A, 0x0A, 0x0B, 0x0B, 0x0C, 0x0C, 0x0D, 0x0D, 0x0E, 0x0E, 0x0F, 0x0F, 0x10, 0x10, 0x11, 0x11, 0x11, 0x12, 0x12, 0x12, 0x12, 0x12, 0x11,
                    0x10, 0x10, 0x10, 0x10, 0x10, 0x11, 0x11, 0x12, 0x12, 0x14, 0x15, 0x17, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x19, 0x19, 0x19, 0x1A, 0x1A, 0x18,
                    0x19, 0x18, 0x17, 0x17, 0x17, 0x16, 0x16, 0x15, 0x14, 0x13, 0x14, 0x13, 0x11, 0x10, 0x0F, 0x0E, 0x0D, 0x0D, 0x0C, 0x0C, 0x0B, 0x0B, 0x0A, 0x0A, 0x09, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x02,
                }};

                constexpr static const add_shifted_type add_shifted_y = {{
                    0x80000000, 0xC0000000, 0x40000000, 0x30000000, 0x28000000, 0x20000000, 0x22000000, 0x16000000, 0x17000000, 0x18000000, 0x19000000, 0x0F000000, 0x0F800000, 0x10000000, 0x10800000, 0x11000000,
                    0x11800000, 0x12000000, 0x09000000, 0x09400000, 0x09800000, 0x09C00000, 0x0A000000, 0x0A400000, 0x0A800000, 0x0AC00000, 0x0B000000, 0x0B400000, 0x0B800000, 0x0BC00000, 0x04A00000, 0x04C00000,
                    0x04E00000, 0x05000000, 0x05200000, 0x05400000, 0x05600000, 0x05800000, 0x05A00000, 0x05C00000, 0x05E00000, 0x06000000, 0x06200000, 0x06400000, 0x06600000, 0x06800000, 0x06A00000, 0x06C00000,
                    0x01F00000, 0x02000000, 0x02100000, 0x02200000, 0x02300000, 0x02400000, 0x02500000, 0x02600000, 0x02700000, 0x02800000, 0x02900000, 0x02A00000, 0x02B00000, 0x02C00000, 0x02D00000, 0x02E00000,
                    0x02F00000, 0x03000000, 0x03100000, 0x03200000, 0x03300000, 0x00C00000, 0x00C80000, 0x00D00000, 0x00D80000, 0x00E00000, 0x00E80000, 0x00F00000, 0x00F80000, 0x01000000, 0x01080000, 0x01100000,
                    0x01180000, 0x01200000, 0x01280000, 0x01300000, 0x01380000, 0x01400000, 0x01480000, 0x01500000, 0x01580000, 0x01600000, 0x00480000, 0x004C0000, 0x00500000, 0x00540000, 0x00580000, 0x005C0000,
                    0x00600000, 0x00640000, 0x00680000, 0x006C0000, 0x00700000, 0x00740000, 0x00780000, 0x007C0000, 0x00800000, 0x00840000, 0x00880000, 0x00120000, 0x00140000, 0x00160000, 0x00180000, 0x001A0000,
                    0x001C0000, 0x001E0000, 0x00200000, 0x00220000, 0x00240000, 0x00260000, 0x00280000, 0x002A0000, 0x00040000, 0x00050000, 0x00060000, 0x00070000, 0x00080000, 0x00090000, 0x00000000, 0x00008000,
                    0x00010000, 0x00018000, 0x00020000, 0x00028000, 0x00030000, 0x00038000, 0x000A0000, 0x000B0000, 0x000C0000, 0x000D0000, 0x000E0000, 0x000F0000, 0x00100000, 0x00110000, 0x002C0000, 0x002E0000,
                    0x00300000, 0x00320000, 0x00340000, 0x00360000, 0x00380000, 0x003A0000, 0x003C0000, 0x003E0000, 0x00400000, 0x00420000, 0x00440000, 0x008C0000, 0x00460000, 0x00900000, 0x00940000, 0x00980000,
                    0x009C0000, 0x00A00000, 0x00A40000, 0x00A80000, 0x00AC0000, 0x00B00000, 0x00B40000, 0x00B80000, 0x00BC0000, 0x01680000, 0x01700000, 0x01780000, 0x01800000, 0x01880000, 0x01900000, 0x01980000,
                    0x01A00000, 0x01A80000, 0x01B00000, 0x01B80000, 0x01C00000, 0x01C80000, 0x01D00000, 0x01D80000, 0x01E00000, 0x01E80000, 0x03400000, 0x03500000, 0x03600000, 0x03700000, 0x03800000, 0x03900000,
                    0x03A00000, 0x03B00000, 0x03C00000, 0x03D00000, 0x03E00000, 0x03F00000, 0x04000000, 0x04100000, 0x04200000, 0x04300000, 0x04400000, 0x04500000, 0x04600000, 0x04700000, 0x04800000, 0x04900000,
                    0x06E00000, 0x07000000, 0x07200000, 0x07400000, 0x07600000, 0x07800000, 0x07A00000, 0x07C00000, 0x07E00000, 0x08000000, 0x08200000, 0x08400000, 0x08600000, 0x08800000, 0x08A00000, 0x08C00000,
                    0x08E00000, 0x0C000000, 0x0C400000, 0x0C800000, 0x0CC00000, 0x0D000000, 0x0D400000, 0x0D800000, 0x0DC00000, 0x0E000000, 0x0E400000, 0x0E800000, 0x0EC00000, 0x12800000, 0x13000000, 0x13800000,
                    0x14000000, 0x14800000, 0x15000000, 0x15800000, 0x1A000000, 0x1B000000, 0x1C000000, 0x1D000000, 0x1E000000, 0x1F000000, 0x24000000, 0x26000000, 0x2C000000, 0x38000000, 0x50000000, 0x60000000,
                }};
                constexpr static const add_shifted_type add_shifted_u = {{
                    0x40000000, 0x80000000, 0x20000000, 0x10000000, 0x08000000, 0x04000000, 0x02000000, 0x01800000, 0x00C00000, 0x00600000, 0x00800000, 0x00400000, 0x00280000, 0x00300000, 0x00180000, 0x001C0000,
                    0x000A0000, 0x000C0000, 0x00050000, 0x00060000, 0x00030000, 0x00038000, 0x00018000, 0x0001C000, 0x00020000, 0x0000E000, 0x00010000, 0x0000A000, 0x00005800, 0x00006000, 0x00006800, 0x00007000,
                    0x00003800, 0x00003C00, 0x00002E00, 0x00003000, 0x00002900, 0x00002980, 0x00002A00, 0x00002A80, 0x00002B00, 0x00000000, 0x00002B80, 0x00002C00, 0x00000040, 0x00000080, 0x000000C0, 0x00000100,
                    0x00000140, 0x00000180, 0x000001C0, 0x00000200, 0x00000240, 0x00000280, 0x000002C0, 0x00000300, 0x00000340, 0x00000380, 0x000003C0, 0x00000400, 0x00000440, 0x00000480, 0x000004C0, 0x00000500,
                    0x00000540, 0x00000580, 0x000005C0, 0x00000600, 0x00000640, 0x00000680, 0x000006C0, 0x00000700, 0x00000740, 0x00000780, 0x000007C0, 0x00000800, 0x00000840, 0x00000880, 0x000008C0, 0x00000900,
                    0x00000940, 0x00000980, 0x000009C0, 0x00000A00, 0x00000A40, 0x00000A80, 0x00000AC0, 0x00000B00, 0x00000B40, 0x00000B80, 0x00000BC0, 0x00000C00, 0x00000C40, 0x00000C80, 0x00000CC0, 0x00000D00,
                    0x00000D40, 0x00000D80, 0x00000DC0, 0x00000E00, 0x00000E40, 0x00000E80, 0x00000EC0, 0x00000F00, 0x00000F40, 0x00000F80, 0x00000FC0, 0x00001000, 0x00001040, 0x00001080, 0x000010C0, 0x00001100,
                    0x00001140, 0x00001180, 0x000011C0, 0x00001200, 0x00001240, 0x00001280, 0x000012C0, 0x00001300, 0x00001340, 0x00001380, 0x000013C0, 0x00001400, 0x00001440, 0x00001480, 0x000014C0, 0x00001500,
                    0x00001540, 0x00001580, 0x000015C0, 0x00001600, 0x00001640, 0x00001680, 0x000016C0, 0x00001700, 0x00001740, 0x00001780, 0x000017C0, 0x00001800, 0x00001840, 0x00001880, 0x000018C0, 0x00001900,
                    0x00001940, 0x00001980, 0x000019C0, 0x00001A00, 0x00001A40, 0x00001A80, 0x00001AC0, 0x00001B00, 0x00001B40, 0x00001B80, 0x00001BC0, 0x00001C00, 0x00001C40, 0x00001C80, 0x00001CC0, 0x00001D00,
                    0x00001D40, 0x00001D80, 0x00001DC0, 0x00001E00, 0x00001E40, 0x00001E80, 0x00001EC0, 0x00001F00, 0x00001F40, 0x00001F80, 0x00001FC0, 0x00002000, 0x00002040, 0x00002080, 0x000020C0, 0x00002100,
                    0x00002140, 0x00002180, 0x000021C0, 0x00002200, 0x00002240, 0x00002280, 0x000022C0, 0x00002300, 0x00002340, 0x00002380, 0x000023C0, 0x00002400, 0x00002440, 0x00002480, 0x000024C0, 0x00002500,
                    0x00002540, 0x00002580, 0x000025C0, 0x00002600, 0x00002640, 0x00002680, 0x000026C0, 0x00002700, 0x00002740, 0x00002780, 0x00002C80, 0x000027C0, 0x00002800, 0x00002840, 0x00002D00, 0x00002880,
                    0x000028C0, 0x00002D80, 0x00003200, 0x00003400, 0x00004000, 0x00003600, 0x00004400, 0x00004800, 0x00004C00, 0x00005000, 0x00007800, 0x00005400, 0x00008000, 0x00008800, 0x00009000, 0x00009800,
                    0x0000B000, 0x0000C000, 0x0000D000, 0x00012000, 0x00014000, 0x00016000, 0x00024000, 0x00028000, 0x0002C000, 0x00040000, 0x00048000, 0x00070000, 0x00080000, 0x00090000, 0x000E0000, 0x00100000,
                    0x00120000, 0x00140000, 0x00160000, 0x00200000, 0x00240000, 0x00380000, 0x00500000, 0x00A00000, 0x01000000, 0x01400000, 0x03000000, 0x06000000, 0x0C000000, 0x18000000, 0x30000000, 0xC0000000,
                }};
                constexpr static const add_shifted_type add_shifted_v = {{
                    0x40000000, 0x80000000, 0x20000000, 0x10000000, 0x06000000, 0x08000000, 0x04000000, 0x02000000, 0x02800000, 0x01000000, 0x01400000, 0x00800000, 0x00A00000, 0x00400000, 0x00500000, 0x00200000,
                    0x00280000, 0x00140000, 0x00180000, 0x000E0000, 0x00100000, 0x00060000, 0x00070000, 0x00028000, 0x00030000, 0x00038000, 0x0000C000, 0x00010000, 0x00014000, 0x00018000, 0x0001C000, 0x00040000,
                    0x00080000, 0x00090000, 0x000A0000, 0x000B0000, 0x000C0000, 0x00048000, 0x00050000, 0x00020000, 0x00024000, 0x00005000, 0x00004000, 0x00003000, 0x00000000, 0x00000040, 0x00000080, 0x000000C0,
                    0x00000100, 0x00000140, 0x00000180, 0x000001C0, 0x00000200, 0x00000240, 0x00000280, 0x000002C0, 0x00000300, 0x00000340, 0x00000380, 0x000003C0, 0x00000400, 0x00000440, 0x00000480, 0x000004C0,
                    0x00000500, 0x00000540, 0x00000580, 0x000005C0, 0x00000600, 0x00000640, 0x00000680, 0x000006C0, 0x00000700, 0x00000740, 0x00000780, 0x000007C0, 0x00000800, 0x00000840, 0x00000880, 0x000008C0,
                    0x00000900, 0x00000940, 0x00000980, 0x000009C0, 0x00000A00, 0x00000A40, 0x00000A80, 0x00000AC0, 0x00000B00, 0x00000B40, 0x00000B80, 0x00000BC0, 0x00000C00, 0x00000C40, 0x00000C80, 0x00000CC0,
                    0x00000D00, 0x00000D40, 0x00000D80, 0x00000DC0, 0x00000E00, 0x00000E40, 0x00000E80, 0x00000EC0, 0x00000F00, 0x00000F40, 0x00000F80, 0x00000FC0, 0x00001000, 0x00001040, 0x00001080, 0x000010C0,
                    0x00001100, 0x00001140, 0x00001180, 0x000011C0, 0x00001200, 0x00001240, 0x00001280, 0x000012C0, 0x00001300, 0x00001340, 0x00001380, 0x000013C0, 0x00001400, 0x00001440, 0x00001480, 0x000014C0,
                    0x00001500, 0x00001540, 0x00001580, 0x000015C0, 0x00001600, 0x00001640, 0x00001680, 0x000016C0, 0x00001700, 0x00001740, 0x00001780, 0x000017C0, 0x00001800, 0x00001840, 0x00001880, 0x000018C0,
                    0x00001900, 0x00001940, 0x00001980, 0x000019C0, 0x00001A00, 0x00001A40, 0x00001A80, 0x00001AC0, 0x00001B00, 0x00001B40, 0x00001B80, 0x00001BC0, 0x00001C00, 0x00001C40, 0x00001C80, 0x00001CC0,
                    0x00001D00, 0x00001D40, 0x00001D80, 0x00001DC0, 0x00001E00, 0x00001E40, 0x00001E80, 0x00001EC0, 0x00001F00, 0x00001F40, 0x00001F80, 0x00001FC0, 0x00002000, 0x00002040, 0x00002080, 0x000020C0,
                    0x00002100, 0x00002140, 0x00002180, 0x000021C0, 0x00002200, 0x00002240, 0x00002280, 0x000022C0, 0x00002300, 0x00002340, 0x00002380, 0x000023C0, 0x00002400, 0x00002440, 0x00002480, 0x000024C0,
                    0x00002500, 0x00002540, 0x00002580, 0x000025C0, 0x00002600, 0x00002640, 0x00002680, 0x000026C0, 0x00002700, 0x00002740, 0x00002780, 0x000027C0, 0x00002800, 0x00002840, 0x00002880, 0x000028C0,
                    0x00002900, 0x00002940, 0x00002980, 0x000029C0, 0x00002A00, 0x00002A40, 0x00002A80, 0x00002AC0, 0x00002B00, 0x00002B40, 0x00002C00, 0x00002C80, 0x00002D00, 0x00002B80, 0x00002BC0, 0x00002E00,
                    0x00002D80, 0x00002F00, 0x00003200, 0x00003400, 0x00003600, 0x00003800, 0x00003C00, 0x00004800, 0x00006000, 0x00008000, 0x00007000, 0x0000A000, 0x00058000, 0x000D0000, 0x00120000, 0x001C0000,
                    0x00300000, 0x00380000, 0x00600000, 0x00700000, 0x00C00000, 0x00E00000, 0x01800000, 0x01C00000, 0x03000000, 0x03800000, 0x05000000, 0x0A000000, 0x0C000000, 0x18000000, 0x30000000, 0xC0000000,
                }};
            };

            class prediction_gradient final {
            public:
                constexpr static const shift_type shift_y = {{
                    0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x07, 0x07, 0x08, 0x08, 0x08, 0x08, 0x08, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A,
                    0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E,
                    0x0E, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x12, 0x12, 0x12, 0x12,
                    0x12, 0x12, 0x12, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x15, 0x15, 0x16, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x16, 0x17,
                    0x17, 0x17, 0x16, 0x17, 0x16, 0x17, 0x17, 0x17, 0x16, 0x16, 0x16, 0x16, 0x16, 0x17, 0x16, 0x15, 0x16, 0x15, 0x15, 0x15, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x13, 0x14, 0x13, 0x13, 0x13,
                    0x13, 0x12, 0x12, 0x12, 0x12, 0x12, 0x11, 0x11, 0x11, 0x11, 0x11, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0E, 0x0E, 0x0E, 0x0E,
                    0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B,
                    0x0B, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x08, 0x08, 0x08, 0x08, 0x08, 0x07, 0x07, 0x07, 0x06, 0x05, 0x04, 0x02,
                }};
                constexpr static const shift_type shift_u = {{
                    0x02, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D, 0x0E, 0x10, 0x10, 0x11, 0x11, 0x12, 0x12, 0x13, 0x13, 0x13, 0x14, 0x14, 0x14, 0x14, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15,
                    0x16, 0x17, 0x17, 0x17, 0x17, 0x1A, 0x18, 0x1A, 0x1A, 0x19, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x19, 0x1A, 0x1A, 0x18, 0x19, 0x1A, 0x18, 0x1A, 0x19, 0x1A, 0x19, 0x18, 0x18, 0x18, 0x18, 0x17, 0x16, 0x17, 0x16, 0x16,
                    0x15, 0x15, 0x15, 0x14, 0x15, 0x14, 0x14, 0x14, 0x15, 0x14, 0x15, 0x14, 0x14, 0x14, 0x14, 0x13, 0x13, 0x13, 0x13, 0x12, 0x12, 0x11, 0x10, 0x0F, 0x0F, 0x0D, 0x0C, 0x09, 0x07, 0x05, 0x03, 0x02,
                }};
                constexpr static const shift_type shift_v = {{
                    0x02, 0x02, 0x04, 0x06, 0x08, 0x09, 0x0A, 0x0C, 0x0C, 0x0D, 0x0E, 0x0E, 0x0F, 0x10, 0x10, 0x10, 0x11, 0x11, 0x11, 0x12, 0x12, 0x13, 0x13, 0x13, 0x14, 0x15, 0x17, 0x16, 0x16, 0x17, 0x16, 0x17,
                    0x16, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
                    0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
                    0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
                    0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
                    0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
                    0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
                    0x17, 0x17, 0x16, 0x15, 0x16, 0x15, 0x14, 0x15, 0x13, 0x14, 0x14, 0x13, 0x12, 0x13, 0x12, 0x12, 0x11, 0x10, 0x10, 0x10, 0x0F, 0x0E, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08, 0x05, 0x03, 0x02,
                }};

                constexpr static const add_shifted_type add_shifted_y = {{
                    0x80000000, 0x60000000, 0x40000000, 0x30000000, 0x28000000, 0x1C000000, 0x1E000000, 0x20000000, 0x12000000, 0x13000000, 0x14000000, 0x15000000, 0x16000000, 0x0A000000, 0x0A800000, 0x0B000000,
                    0x0B800000, 0x0C000000, 0x0C800000, 0x0D000000, 0x0D800000, 0x04800000, 0x04C00000, 0x05000000, 0x05400000, 0x05800000, 0x05C00000, 0x06000000, 0x06400000, 0x06800000, 0x06C00000, 0x07000000,
                    0x02200000, 0x02400000, 0x02600000, 0x02800000, 0x02A00000, 0x02C00000, 0x02E00000, 0x03000000, 0x03200000, 0x03400000, 0x01100000, 0x01200000, 0x01300000, 0x01400000, 0x01500000, 0x01600000,
                    0x01700000, 0x01800000, 0x00900000, 0x00980000, 0x00A00000, 0x00A80000, 0x00B00000, 0x00B80000, 0x00C00000, 0x00440000, 0x00480000, 0x004C0000, 0x00500000, 0x00540000, 0x00580000, 0x005C0000,
                    0x00600000, 0x00640000, 0x001C0000, 0x001E0000, 0x00200000, 0x00220000, 0x00240000, 0x00260000, 0x00280000, 0x002A0000, 0x002C0000, 0x002E0000, 0x00300000, 0x000C0000, 0x000D0000, 0x000E0000,
                    0x000F0000, 0x00100000, 0x00110000, 0x00120000, 0x00130000, 0x00060000, 0x00068000, 0x00070000, 0x00078000, 0x00080000, 0x00088000, 0x00090000, 0x00030000, 0x00034000, 0x00038000, 0x0003C000,
                    0x00040000, 0x00044000, 0x00048000, 0x00016000, 0x00018000, 0x0001A000, 0x0001C000, 0x0001E000, 0x00020000, 0x00022000, 0x00024000, 0x00008000, 0x00009000, 0x0000A000, 0x0000B000, 0x0000C000,
                    0x0000D000, 0x00005000, 0x00005800, 0x00002400, 0x00000000, 0x00000200, 0x00000400, 0x00000600, 0x00000800, 0x00000A00, 0x00000C00, 0x00000E00, 0x00001000, 0x00001200, 0x00002800, 0x00001400,
                    0x00001600, 0x00001800, 0x00002C00, 0x00001A00, 0x00003000, 0x00001C00, 0x00001E00, 0x00002000, 0x00003400, 0x00003800, 0x00003C00, 0x00004000, 0x00004400, 0x00002200, 0x00004800, 0x00006000,
                    0x00004C00, 0x00006800, 0x00007000, 0x00007800, 0x0000E000, 0x0000F000, 0x00010000, 0x00011000, 0x00012000, 0x00013000, 0x00014000, 0x00026000, 0x00015000, 0x00028000, 0x0002A000, 0x0002C000,
                    0x0002E000, 0x0004C000, 0x00050000, 0x00054000, 0x00058000, 0x0005C000, 0x00098000, 0x000A0000, 0x000A8000, 0x000B0000, 0x000B8000, 0x00140000, 0x00150000, 0x00160000, 0x00170000, 0x00180000,
                    0x00190000, 0x001A0000, 0x001B0000, 0x00320000, 0x00340000, 0x00360000, 0x00380000, 0x003A0000, 0x003C0000, 0x003E0000, 0x00400000, 0x00420000, 0x00680000, 0x006C0000, 0x00700000, 0x00740000,
                    0x00780000, 0x007C0000, 0x00800000, 0x00840000, 0x00880000, 0x008C0000, 0x00C80000, 0x00D00000, 0x00D80000, 0x00E00000, 0x00E80000, 0x00F00000, 0x00F80000, 0x01000000, 0x01080000, 0x01900000,
                    0x01A00000, 0x01B00000, 0x01C00000, 0x01D00000, 0x01E00000, 0x01F00000, 0x02000000, 0x02100000, 0x03600000, 0x03800000, 0x03A00000, 0x03C00000, 0x03E00000, 0x04000000, 0x04200000, 0x04400000,
                    0x04600000, 0x07400000, 0x07800000, 0x07C00000, 0x08000000, 0x08400000, 0x08800000, 0x08C00000, 0x09000000, 0x09400000, 0x09800000, 0x09C00000, 0x0E000000, 0x0E800000, 0x0F000000, 0x0F800000,
                    0x10000000, 0x10800000, 0x11000000, 0x11800000, 0x17000000, 0x18000000, 0x19000000, 0x1A000000, 0x1B000000, 0x22000000, 0x24000000, 0x26000000, 0x2C000000, 0x38000000, 0x50000000, 0xC0000000,
                }};
                constexpr static const add_shifted_type add_shifted_u = {{
                    0x40000000, 0x80000000, 0x10000000, 0x04000000, 0x01000000, 0x00400000, 0x00200000, 0x00100000, 0x000C0000, 0x00050000, 0x00060000, 0x00038000, 0x00040000, 0x00028000, 0x0002C000, 0x0001A000,
                    0x0001C000, 0x0001E000, 0x0000D000, 0x0000E000, 0x0000F000, 0x00010000, 0x00005000, 0x00005800, 0x00006000, 0x00006800, 0x00007000, 0x00007800, 0x00008000, 0x00008800, 0x00009000, 0x00009800,
                    0x00004000, 0x00003400, 0x00003600, 0x00003800, 0x00003A00, 0x00000000, 0x00002D00, 0x00000040, 0x00000080, 0x00002A80, 0x000000C0, 0x00000100, 0x00000140, 0x00000180, 0x000001C0, 0x00000200,
                    0x00000240, 0x00000280, 0x000002C0, 0x00000300, 0x00000340, 0x00000380, 0x000003C0, 0x00000400, 0x00000440, 0x00000480, 0x000004C0, 0x00000500, 0x00000540, 0x00000580, 0x000005C0, 0x00000600,
                    0x00000640, 0x00000680, 0x000006C0, 0x00000700, 0x00000740, 0x00000780, 0x000007C0, 0x00000800, 0x00000840, 0x00000880, 0x000008C0, 0x00000900, 0x00000940, 0x00000980, 0x000009C0, 0x00000A00,
                    0x00000A40, 0x00000A80, 0x00000AC0, 0x00000B00, 0x00000B40, 0x00000B80, 0x00000BC0, 0x00000C00, 0x00000C40, 0x00000C80, 0x00000CC0, 0x00000D00, 0x00000D40, 0x00000D80, 0x00000DC0, 0x00000E00,
                    0x00000E40, 0x00000E80, 0x00000EC0, 0x00000F00, 0x00000F40, 0x00000F80, 0x00000FC0, 0x00001000, 0x00001040, 0x00001080, 0x000010C0, 0x00001100, 0x00001140, 0x00001180, 0x000011C0, 0x00001200,
                    0x00001240, 0x00001280, 0x000012C0, 0x00001300, 0x00001340, 0x00001380, 0x000013C0, 0x00001400, 0x00001440, 0x00001480, 0x000014C0, 0x00001500, 0x00001540, 0x00001580, 0x000015C0, 0x00001600,
                    0x00001640, 0x00001680, 0x000016C0, 0x00001700, 0x00001740, 0x00001780, 0x000017C0, 0x00001800, 0x00001840, 0x00001880, 0x000018C0, 0x00001900, 0x00001940, 0x00001980, 0x000019C0, 0x00001A00,
                    0x00001A40, 0x00001A80, 0x00001AC0, 0x00001B00, 0x00001B40, 0x00001B80, 0x00001BC0, 0x00001C00, 0x00001C40, 0x00001C80, 0x00001CC0, 0x00001D00, 0x00001D40, 0x00001D80, 0x00001DC0, 0x00001E00,
                    0x00001E40, 0x00001E80, 0x00001EC0, 0x00001F00, 0x00001F40, 0x00001F80, 0x00001FC0, 0x00002000, 0x00002040, 0x00002080, 0x000020C0, 0x00002100, 0x00002140, 0x00002180, 0x000021C0, 0x00002200,
                    0x00002240, 0x00002280, 0x000022C0, 0x00002300, 0x00002340, 0x00002380, 0x000023C0, 0x00002400, 0x00002440, 0x00002480, 0x000024C0, 0x00002500, 0x00002540, 0x00002580, 0x000025C0, 0x00002600,
                    0x00002640, 0x00002680, 0x000026C0, 0x00002700, 0x00002740, 0x00002780, 0x000027C0, 0x00002800, 0x00002840, 0x00002880, 0x000028C0, 0x00002900, 0x00002B00, 0x00002940, 0x00002980, 0x00002E00,
                    0x00002B80, 0x000029C0, 0x00002F00, 0x00002A00, 0x00002C00, 0x00002A40, 0x00002C80, 0x00003000, 0x00003100, 0x00003200, 0x00003300, 0x00003C00, 0x00004400, 0x00003E00, 0x00004800, 0x00004C00,
                    0x0000A000, 0x0000A800, 0x0000B000, 0x00011000, 0x0000B800, 0x00012000, 0x00013000, 0x00014000, 0x0000C000, 0x00015000, 0x0000C800, 0x00016000, 0x00017000, 0x00018000, 0x00019000, 0x00020000,
                    0x00022000, 0x00024000, 0x00026000, 0x00030000, 0x00034000, 0x00048000, 0x00070000, 0x00080000, 0x000A0000, 0x00180000, 0x00300000, 0x00800000, 0x02000000, 0x08000000, 0x20000000, 0xC0000000,
                }};
                constexpr static const add_shifted_type add_shifted_v = {{
                    0x40000000, 0x80000000, 0x10000000, 0x04000000, 0x02000000, 0x01000000, 0x00800000, 0x00300000, 0x00400000, 0x00200000, 0x00100000, 0x00140000, 0x000C0000, 0x00060000, 0x00070000, 0x00080000,
                    0x00040000, 0x00048000, 0x00050000, 0x0002C000, 0x00030000, 0x00020000, 0x00022000, 0x00024000, 0x0001C000, 0x0001A000, 0x00000000, 0x00018800, 0x00018C00, 0x00000200, 0x00019000, 0x00000400,
                    0x00019400, 0x00000600, 0x00000800, 0x00000A00, 0x00000C00, 0x00000E00, 0x00001000, 0x00001200, 0x00001400, 0x00001600, 0x00001800, 0x00001A00, 0x00001C00, 0x00001E00, 0x00002000, 0x00002200,
                    0x00002400, 0x00002600, 0x00002800, 0x00002A00, 0x00002C00, 0x00002E00, 0x00003000, 0x00003200, 0x00003400, 0x00003600, 0x00003800, 0x00003A00, 0x00003C00, 0x00003E00, 0x00004000, 0x00004200,
                    0x00004400, 0x00004600, 0x00004800, 0x00004A00, 0x00004C00, 0x00004E00, 0x00005000, 0x00005200, 0x00005400, 0x00005600, 0x00005800, 0x00005A00, 0x00005C00, 0x00005E00, 0x00006000, 0x00006200,
                    0x00006400, 0x00006600, 0x00006800, 0x00006A00, 0x00006C00, 0x00006E00, 0x00007000, 0x00007200, 0x00007400, 0x00007600, 0x00007800, 0x00007A00, 0x00007C00, 0x00007E00, 0x00008000, 0x00008200,
                    0x00008400, 0x00008600, 0x00008800, 0x00008A00, 0x00008C00, 0x00008E00, 0x00009000, 0x00009200, 0x00009400, 0x00009600, 0x00009800, 0x00009A00, 0x00009C00, 0x00009E00, 0x0000A000, 0x0000A200,
                    0x0000A400, 0x0000A600, 0x0000A800, 0x0000AA00, 0x0000AC00, 0x0000AE00, 0x0000B000, 0x0000B200, 0x0000B400, 0x0000B600, 0x0000B800, 0x0000BA00, 0x0000BC00, 0x0000BE00, 0x0000C000, 0x0000C200,
                    0x0000C400, 0x0000C600, 0x0000C800, 0x0000CA00, 0x0000CC00, 0x0000CE00, 0x0000D000, 0x0000D200, 0x0000D400, 0x0000D600, 0x0000D800, 0x0000DA00, 0x0000DC00, 0x0000DE00, 0x0000E000, 0x0000E200,
                    0x0000E400, 0x0000E600, 0x0000E800, 0x0000EA00, 0x0000EC00, 0x0000EE00, 0x0000F000, 0x0000F200, 0x0000F400, 0x0000F600, 0x0000F800, 0x0000FA00, 0x0000FC00, 0x0000FE00, 0x00010000, 0x00010200,
                    0x00010400, 0x00010600, 0x00010800, 0x00010A00, 0x00010C00, 0x00010E00, 0x00011000, 0x00011200, 0x00011400, 0x00011600, 0x00011800, 0x00011A00, 0x00011C00, 0x00011E00, 0x00012000, 0x00012200,
                    0x00012400, 0x00012600, 0x00012800, 0x00012A00, 0x00012C00, 0x00012E00, 0x00013000, 0x00013200, 0x00013400, 0x00013600, 0x00013800, 0x00013A00, 0x00013C00, 0x00013E00, 0x00014000, 0x00014200,
                    0x00014400, 0x00014600, 0x00014800, 0x00014A00, 0x00014C00, 0x00014E00, 0x00015000, 0x00015200, 0x00015400, 0x00015600, 0x00015800, 0x00015A00, 0x00015C00, 0x00015E00, 0x00016000, 0x00016200,
                    0x00016400, 0x00016600, 0x00016800, 0x00016A00, 0x00016C00, 0x00016E00, 0x00017000, 0x00017200, 0x00017400, 0x00017600, 0x00017800, 0x00017A00, 0x00017C00, 0x00017E00, 0x00018000, 0x00018200,
                    0x00018400, 0x00018600, 0x00019800, 0x0001A800, 0x00019C00, 0x0001B000, 0x0001D000, 0x0001B800, 0x00026000, 0x0001E000, 0x0001F000, 0x00028000, 0x00034000, 0x0002A000, 0x00038000, 0x0003C000,
                    0x00058000, 0x00090000, 0x000A0000, 0x000B0000, 0x000E0000, 0x00180000, 0x001C0000, 0x00280000, 0x00500000, 0x00600000, 0x00C00000, 0x01800000, 0x03000000, 0x08000000, 0x20000000, 0xC0000000,
                }};
            };

            class prediction_median final {
            public:
                constexpr static const shift_type shift_y = {{
                    0x02, 0x02, 0x05, 0x06, 0x07, 0x07, 0x08, 0x08, 0x08, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B,
                    0x0B, 0x0B, 0x0B, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0F, 0x0F,
                    0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x12, 0x11, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x13, 0x13, 0x14,
                    0x13, 0x13, 0x14, 0x14, 0x14, 0x15, 0x17, 0x16, 0x17, 0x18, 0x19, 0x19, 0x1A, 0x1A, 0x1A, 0x18, 0x17, 0x18, 0x19, 0x19, 0x19, 0x1A, 0x19, 0x1A, 0x19, 0x19, 0x18, 0x18, 0x19, 0x18, 0x17, 0x18,
                    0x18, 0x19, 0x18, 0x18, 0x18, 0x19, 0x19, 0x1A, 0x1A, 0x18, 0x18, 0x18, 0x18, 0x19, 0x19, 0x19, 0x1A, 0x19, 0x18, 0x17, 0x16, 0x16, 0x15, 0x16, 0x15, 0x16, 0x15, 0x14, 0x15, 0x14, 0x14, 0x14,
                    0x13, 0x13, 0x13, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
                    0x0F, 0x0F, 0x0F, 0x0F, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0B, 0x0B,
                    0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x08, 0x08, 0x08, 0x08, 0x07, 0x07, 0x07, 0x06, 0x04, 0x02,
                }};
                constexpr static const shift_type shift_u = {{
                    0x02, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x11, 0x12, 0x13, 0x13, 0x13, 0x14, 0x14, 0x14, 0x15, 0x14, 0x15, 0x15, 0x15, 0x15, 0x14, 0x14, 0x15, 0x15, 0x16,
                    0x17, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x18, 0x18, 0x19, 0x18, 0x17, 0x18, 0x16, 0x16, 0x16, 0x15,
                    0x15, 0x15, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x13, 0x13, 0x13, 0x13, 0x12, 0x12, 0x12, 0x11, 0x10, 0x10, 0x0F, 0x0E, 0x0E, 0x0C, 0x0B, 0x0A, 0x07, 0x05, 0x03, 0x02,
                }};
                constexpr static const shift_type shift_v = {{
                    0x01, 0x03, 0x05, 0x07, 0x08, 0x09, 0x0B, 0x0B, 0x0C, 0x0D, 0x0D, 0x0E, 0x0F, 0x0F, 0x10, 0x10, 0x10, 0x11, 0x11, 0x11, 0x12, 0x12, 0x14, 0x14, 0x14, 0x14, 0x15, 0x19, 0x18, 0x19, 0x19, 0x18,
                    0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19,
                    0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19,
                    0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19,
                    0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19,
                    0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19,
                    0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x18, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19,
                    0x19, 0x19, 0x19, 0x19, 0x19, 0x18, 0x19, 0x18, 0x18, 0x16, 0x17, 0x15, 0x14, 0x14, 0x13, 0x12, 0x12, 0x11, 0x10, 0x0F, 0x0F, 0x0E, 0x0D, 0x0C, 0x0C, 0x0B, 0x0A, 0x09, 0x08, 0x07, 0x04, 0x02,
                }};

                constexpr static const add_shifted_type add_shifted_y = {{
                    0x40000000, 0x80000000, 0x28000000, 0x20000000, 0x16000000, 0x18000000, 0x0F000000, 0x10000000, 0x11000000, 0x09000000, 0x09800000, 0x0A000000, 0x0A800000, 0x0B000000, 0x0B800000, 0x05000000,
                    0x05400000, 0x05800000, 0x05C00000, 0x06000000, 0x06400000, 0x06800000, 0x06C00000, 0x07000000, 0x02400000, 0x02600000, 0x02800000, 0x02A00000, 0x02C00000, 0x02E00000, 0x03000000, 0x03200000,
                    0x03400000, 0x03600000, 0x03800000, 0x01100000, 0x01200000, 0x01300000, 0x01400000, 0x01500000, 0x01600000, 0x01700000, 0x01800000, 0x01900000, 0x00800000, 0x00880000, 0x00900000, 0x00980000,
                    0x00A00000, 0x00A80000, 0x00B00000, 0x00B80000, 0x00C00000, 0x00400000, 0x00440000, 0x00480000, 0x004C0000, 0x00500000, 0x00540000, 0x00580000, 0x005C0000, 0x00600000, 0x001E0000, 0x00200000,
                    0x00220000, 0x00240000, 0x00260000, 0x00280000, 0x002A0000, 0x002C0000, 0x000D0000, 0x000E0000, 0x000F0000, 0x00100000, 0x00110000, 0x00120000, 0x00130000, 0x00140000, 0x00150000, 0x00058000,
                    0x00060000, 0x00068000, 0x00070000, 0x00078000, 0x00080000, 0x0001C000, 0x00088000, 0x00020000, 0x00024000, 0x00028000, 0x0002C000, 0x00030000, 0x00034000, 0x0000E000, 0x00010000, 0x00006000,
                    0x00012000, 0x00014000, 0x00007000, 0x00008000, 0x00009000, 0x00003800, 0x00001A00, 0x00002400, 0x00001C00, 0x00000A00, 0x00000200, 0x00000280, 0x00000000, 0x00000040, 0x00000080, 0x00000B00,
                    0x00001E00, 0x00000C00, 0x00000300, 0x00000380, 0x00000400, 0x000000C0, 0x00000480, 0x00000100, 0x00000500, 0x00000580, 0x00000D00, 0x00000E00, 0x00000600, 0x00000F00, 0x00002000, 0x00001000,
                    0x00001100, 0x00000680, 0x00001200, 0x00001300, 0x00001400, 0x00000700, 0x00000780, 0x00000140, 0x00000180, 0x00001500, 0x00001600, 0x00001700, 0x00001800, 0x00000800, 0x00000880, 0x00000900,
                    0x000001C0, 0x00000980, 0x00001900, 0x00002200, 0x00002800, 0x00002C00, 0x00004000, 0x00003000, 0x00004800, 0x00003400, 0x00005000, 0x0000A000, 0x00005800, 0x0000B000, 0x0000C000, 0x0000D000,
                    0x00016000, 0x00018000, 0x0001A000, 0x00038000, 0x0003C000, 0x00040000, 0x00044000, 0x00048000, 0x0004C000, 0x00050000, 0x00054000, 0x00090000, 0x00098000, 0x000A0000, 0x000A8000, 0x000B0000,
                    0x000B8000, 0x000C0000, 0x000C8000, 0x00160000, 0x00170000, 0x00180000, 0x00190000, 0x001A0000, 0x001B0000, 0x001C0000, 0x001D0000, 0x002E0000, 0x00300000, 0x00320000, 0x00340000, 0x00360000,
                    0x00380000, 0x003A0000, 0x003C0000, 0x003E0000, 0x00640000, 0x00680000, 0x006C0000, 0x00700000, 0x00740000, 0x00780000, 0x007C0000, 0x00C80000, 0x00D00000, 0x00D80000, 0x00E00000, 0x00E80000,
                    0x00F00000, 0x00F80000, 0x01000000, 0x01080000, 0x01A00000, 0x01B00000, 0x01C00000, 0x01D00000, 0x01E00000, 0x01F00000, 0x02000000, 0x02100000, 0x02200000, 0x02300000, 0x03A00000, 0x03C00000,
                    0x03E00000, 0x04000000, 0x04200000, 0x04400000, 0x04600000, 0x04800000, 0x04A00000, 0x04C00000, 0x04E00000, 0x07400000, 0x07800000, 0x07C00000, 0x08000000, 0x08400000, 0x08800000, 0x08C00000,
                    0x0C000000, 0x0C800000, 0x0D000000, 0x0D800000, 0x0E000000, 0x0E800000, 0x12000000, 0x13000000, 0x14000000, 0x15000000, 0x1A000000, 0x1C000000, 0x1E000000, 0x24000000, 0x30000000, 0xC0000000,
                }};
                constexpr static const add_shifted_type add_shifted_u = {{
                    0x40000000, 0x80000000, 0x10000000, 0x04000000, 0x01000000, 0x00800000, 0x00400000, 0x00200000, 0x00180000, 0x000C0000, 0x00080000, 0x00050000, 0x00038000, 0x00040000, 0x00028000, 0x0001A000,
                    0x0001C000, 0x0001E000, 0x0000A000, 0x0000B000, 0x0000C000, 0x00005000, 0x0000D000, 0x00005800, 0x00006000, 0x00006800, 0x00007000, 0x0000E000, 0x0000F000, 0x00007800, 0x00008000, 0x00004000,
                    0x00003C00, 0x00002300, 0x00002380, 0x00002400, 0x00002480, 0x00002500, 0x00002580, 0x00002600, 0x00002680, 0x00002700, 0x00002780, 0x00002800, 0x00002880, 0x00002900, 0x00002980, 0x00002A00,
                    0x00002A80, 0x00002B00, 0x00002B80, 0x00002C00, 0x00002C80, 0x00002D00, 0x00002D80, 0x00002E00, 0x00002E80, 0x00002F00, 0x00000000, 0x00000040, 0x00000080, 0x000000C0, 0x00000100, 0x00000140,
                    0x00000180, 0x000001C0, 0x00000200, 0x00000240, 0x00000280, 0x000002C0, 0x00000300, 0x00000340, 0x00000380, 0x000003C0, 0x00000400, 0x00000440, 0x00000480, 0x000004C0, 0x00000500, 0x00000540,
                    0x00000580, 0x000005C0, 0x00000600, 0x00000640, 0x00000680, 0x000006C0, 0x00000700, 0x00000740, 0x00000780, 0x000007C0, 0x00000800, 0x00000840, 0x00000880, 0x000008C0, 0x00000900, 0x00000940,
                    0x00000980, 0x000009C0, 0x00000A00, 0x00000A40, 0x00000A80, 0x00000AC0, 0x00000B00, 0x00000B40, 0x00000B80, 0x00000BC0, 0x00000C00, 0x00000C40, 0x00000C80, 0x00000CC0, 0x00000D00, 0x00000D40,
                    0x00000D80, 0x00000DC0, 0x00000E00, 0x00000E40, 0x00000E80, 0x00000EC0, 0x00000F00, 0x00000F40, 0x00000F80, 0x00000FC0, 0x00001000, 0x00001040, 0x00001080, 0x000010C0, 0x00001100, 0x00001140,
                    0x00001180, 0x000011C0, 0x00001200, 0x00001240, 0x00001280, 0x000012C0, 0x00001300, 0x00001340, 0x00001380, 0x000013C0, 0x00001400, 0x00001440, 0x00001480, 0x000014C0, 0x00001500, 0x00001540,
                    0x00001580, 0x000015C0, 0x00001600, 0x00001640, 0x00001680, 0x000016C0, 0x00001700, 0x00001740, 0x00001780, 0x000017C0, 0x00001800, 0x00001840, 0x00001880, 0x000018C0, 0x00001900, 0x00001940,
                    0x00001980, 0x000019C0, 0x00001A00, 0x00001A40, 0x00001A80, 0x00001AC0, 0x00001B00, 0x00001B40, 0x00001B80, 0x00001BC0, 0x00001C00, 0x00001C40, 0x00001C80, 0x00001CC0, 0x00001D00, 0x00001D40,
                    0x00001D80, 0x00001DC0, 0x00001E00, 0x00001E40, 0x00001E80, 0x00001EC0, 0x00001F00, 0x00001F40, 0x00001F80, 0x00001FC0, 0x00002000, 0x00002040, 0x00002080, 0x000020C0, 0x00002100, 0x00002140,
                    0x00002180, 0x000021C0, 0x00002200, 0x00002240, 0x00002280, 0x000022C0, 0x00002F80, 0x00003000, 0x00003080, 0x00003100, 0x00003180, 0x00003200, 0x00003280, 0x00003300, 0x00003380, 0x00003400,
                    0x00003480, 0x00003500, 0x00003580, 0x00003600, 0x00003680, 0x00003700, 0x00003800, 0x00003900, 0x00003780, 0x00003A00, 0x00003E00, 0x00003B00, 0x00004400, 0x00004800, 0x00004C00, 0x00008800,
                    0x00009000, 0x00009800, 0x00010000, 0x00011000, 0x00012000, 0x00013000, 0x00014000, 0x00015000, 0x00016000, 0x00017000, 0x00018000, 0x00019000, 0x00020000, 0x00022000, 0x00024000, 0x00026000,
                    0x0002C000, 0x00030000, 0x00034000, 0x00048000, 0x00060000, 0x00070000, 0x000A0000, 0x00100000, 0x00140000, 0x00300000, 0x00600000, 0x00C00000, 0x02000000, 0x08000000, 0x20000000, 0xC0000000,
                }};
                constexpr static const add_shifted_type add_shifted_v = {{
                    0x80000000, 0x20000000, 0x08000000, 0x04000000, 0x02000000, 0x01000000, 0x00600000, 0x00800000, 0x00300000, 0x00180000, 0x00200000, 0x00100000, 0x00080000, 0x000A0000, 0x00040000, 0x00050000,
                    0x00060000, 0x00020000, 0x00028000, 0x00030000, 0x00010000, 0x00014000, 0x00008000, 0x00009000, 0x0000A000, 0x0000B000, 0x00007000, 0x00000000, 0x00006400, 0x00000080, 0x00000100, 0x00006500,
                    0x00000180, 0x00000200, 0x00000280, 0x00000300, 0x00000380, 0x00000400, 0x00000480, 0x00000500, 0x00000580, 0x00000600, 0x00000680, 0x00000700, 0x00000780, 0x00000800, 0x00000880, 0x00000900,
                    0x00000980, 0x00000A00, 0x00000A80, 0x00000B00, 0x00000B80, 0x00000C00, 0x00000C80, 0x00000D00, 0x00000D80, 0x00000E00, 0x00000E80, 0x00000F00, 0x00000F80, 0x00001000, 0x00001080, 0x00001100,
                    0x00001180, 0x00001200, 0x00001280, 0x00001300, 0x00001380, 0x00001400, 0x00001480, 0x00001500, 0x00001580, 0x00001600, 0x00001680, 0x00001700, 0x00001780, 0x00001800, 0x00001880, 0x00001900,
                    0x00001980, 0x00001A00, 0x00001A80, 0x00001B00, 0x00001B80, 0x00001C00, 0x00001C80, 0x00001D00, 0x00001D80, 0x00001E00, 0x00001E80, 0x00001F00, 0x00001F80, 0x00002000, 0x00002080, 0x00002100,
                    0x00002180, 0x00002200, 0x00002280, 0x00002300, 0x00002380, 0x00002400, 0x00002480, 0x00002500, 0x00002580, 0x00002600, 0x00002680, 0x00002700, 0x00002780, 0x00002800, 0x00002880, 0x00002900,
                    0x00002980, 0x00002A00, 0x00002A80, 0x00002B00, 0x00002B80, 0x00002C00, 0x00002C80, 0x00002D00, 0x00002D80, 0x00002E00, 0x00002E80, 0x00002F00, 0x00002F80, 0x00003000, 0x00003080, 0x00003100,
                    0x00003180, 0x00003200, 0x00003280, 0x00003300, 0x00003380, 0x00003400, 0x00003480, 0x00003500, 0x00003580, 0x00003600, 0x00003680, 0x00003700, 0x00003780, 0x00003800, 0x00003880, 0x00003900,
                    0x00003980, 0x00003A00, 0x00003A80, 0x00003B00, 0x00003B80, 0x00003C00, 0x00003C80, 0x00003D00, 0x00003D80, 0x00003E00, 0x00003E80, 0x00003F00, 0x00003F80, 0x00004000, 0x00004080, 0x00004100,
                    0x00004180, 0x00004200, 0x00004280, 0x00004300, 0x00004380, 0x00004400, 0x00004480, 0x00004500, 0x00004580, 0x00004600, 0x00004680, 0x00004700, 0x00004780, 0x00004800, 0x00004880, 0x00004900,
                    0x00004980, 0x00004A00, 0x00004A80, 0x00004B00, 0x00004B80, 0x00004C00, 0x00004C80, 0x00004D00, 0x00004D80, 0x00004E00, 0x00004E80, 0x00004F00, 0x00004F80, 0x00005000, 0x00005080, 0x00005100,
                    0x00005180, 0x00005200, 0x00005280, 0x00005300, 0x00005380, 0x00005400, 0x00005480, 0x00005500, 0x00005580, 0x00005600, 0x00005680, 0x00005700, 0x00005780, 0x00005800, 0x00005880, 0x00005900,
                    0x00005980, 0x00005A00, 0x00005A80, 0x00005B00, 0x00005B80, 0x00005C00, 0x00005C80, 0x00005D00, 0x00006600, 0x00005D80, 0x00005E00, 0x00005E80, 0x00005F00, 0x00005F80, 0x00006000, 0x00006080,
                    0x00006100, 0x00006180, 0x00006200, 0x00006280, 0x00006300, 0x00006700, 0x00006380, 0x00006800, 0x00006900, 0x00006C00, 0x00006A00, 0x00007800, 0x0000C000, 0x0000D000, 0x0000E000, 0x00018000,
                    0x0001C000, 0x00038000, 0x00070000, 0x000C0000, 0x000E0000, 0x00140000, 0x00280000, 0x00400000, 0x00500000, 0x00A00000, 0x00C00000, 0x01800000, 0x03000000, 0x06000000, 0x10000000, 0x40000000,
                }};
            };
        };

    public:
        constexpr static void get_tables(
            modes mode,
            shift_type& shift_0,
            shift_type& shift_1,
            shift_type& shift_2,
            add_shifted_type& add_shifted_0,
            add_shifted_type& add_shifted_1,
            add_shifted_type& add_shifted_2
        ) {
            switch (mode) {
                case modes::rgb_classic:
                    shift_0 = rgb::classic::shift_b;
                    shift_1 = rgb::classic::shift_g;
                    shift_2 = rgb::classic::shift_r;
                    add_shifted_0 = rgb::classic::add_shifted_b;
                    add_shifted_1 = rgb::classic::add_shifted_g;
                    add_shifted_2 = rgb::classic::add_shifted_r;
                    break;
                case modes::rgb_prediction_left:
                    shift_0 = rgb::prediction_left::shift_b;
                    shift_1 = rgb::prediction_left::shift_g;
                    shift_2 = rgb::prediction_left::shift_r;
                    add_shifted_0 = rgb::prediction_left::add_shifted_b;
                    add_shifted_1 = rgb::prediction_left::add_shifted_g;
                    add_shifted_2 = rgb::prediction_left::add_shifted_r;
                    break;
                case modes::rgb_prediction_left_decorrelate:
                    shift_0 = rgb::prediction_left_decorrelate::shift_bg;
                    shift_1 = rgb::prediction_left_decorrelate::shift_g;
                    shift_2 = rgb::prediction_left_decorrelate::shift_gr;
                    add_shifted_0 = rgb::prediction_left_decorrelate::add_shifted_bg;
                    add_shifted_1 = rgb::prediction_left_decorrelate::add_shifted_g;
                    add_shifted_2 = rgb::prediction_left_decorrelate::add_shifted_gr;
                    break;
                case modes::rgb_prediction_gradient_decorrelate:
                    shift_0 = rgb::prediction_gradient_decorrelate::shift_bg;
                    shift_1 = rgb::prediction_gradient_decorrelate::shift_g;
                    shift_2 = rgb::prediction_gradient_decorrelate::shift_gr;
                    add_shifted_0 = rgb::prediction_gradient_decorrelate::add_shifted_bg;
                    add_shifted_1 = rgb::prediction_gradient_decorrelate::add_shifted_g;
                    add_shifted_2 = rgb::prediction_gradient_decorrelate::add_shifted_gr;
                    break;
                case modes::yuv_classic:
                    shift_0 = yuv::classic::shift_y;
                    shift_1 = yuv::classic::shift_u;
                    shift_2 = yuv::classic::shift_v;
                    add_shifted_0 = yuv::classic::add_shifted_y;
                    add_shifted_1 = yuv::classic::add_shifted_u;
                    add_shifted_2 = yuv::classic::add_shifted_v;
                    break;
                case modes::yuv_prediction_left:
                    shift_0 = yuv::prediction_left::shift_y;
                    shift_1 = yuv::prediction_left::shift_u;
                    shift_2 = yuv::prediction_left::shift_v;
                    add_shifted_0 = yuv::prediction_left::add_shifted_y;
                    add_shifted_1 = yuv::prediction_left::add_shifted_u;
                    add_shifted_2 = yuv::prediction_left::add_shifted_v;
                    break;
                case modes::yuv_prediction_gradient:
                    shift_0 = yuv::prediction_gradient::shift_y;
                    shift_1 = yuv::prediction_gradient::shift_u;
                    shift_2 = yuv::prediction_gradient::shift_v;
                    add_shifted_0 = yuv::prediction_gradient::add_shifted_y;
                    add_shifted_1 = yuv::prediction_gradient::add_shifted_u;
                    add_shifted_2 = yuv::prediction_gradient::add_shifted_v;
                    break;
                case modes::yuv_prediction_median:
                    shift_0 = yuv::prediction_median::shift_y;
                    shift_1 = yuv::prediction_median::shift_u;
                    shift_2 = yuv::prediction_median::shift_v;
                    add_shifted_0 = yuv::prediction_median::add_shifted_y;
                    add_shifted_1 = yuv::prediction_median::add_shifted_u;
                    add_shifted_2 = yuv::prediction_median::add_shifted_v;
                    break;
            }
        }
    };

    enum class image_types {
        uyvy,
        yuyv, // yuy2
        bgr,
        bgra
    };

private:
    avi video;
    unsigned int stream_number;
    int bit_count;
    bool interlaced;
    tables::modes mode;
    tables::decode_table_type decode[3];
    std::vector<avi::frame_type> frames_uncompressed;

public:
    bool parse(const unsigned char* data, unsigned long long int length) {
        this->frames_uncompressed.clear();

        if (!this->video.parse(data, length)) {
            std::fprintf(stderr, "Error: Failed to parse avi file.\n");
            return false;
        }

        this->stream_number = 0xFFFFFFFF;
        for (unsigned int i = 0; i < this->video.get_strhs().size(); ++i) {
            const avi::strh_type& strh = this->video.get_strhs()[i];
            if (
                (strh.type == avi::fourcc("vids")) &&
                ((strh.handler == avi::fourcc("hfyu")) || (strh.handler == avi::fourcc("HFYU")))
            ) {
                const avi::strf_type& strf = this->video.get_strfs()[i];
                if (
                    (strf.identifier == avi::fourcc("vids")) &&
                    (strf.strf_vids.compression_identifier == avi::fourcc("HFYU"))
                ) {
                    this->stream_number = i;
                    break;
                }
            }
        }
        if (this->stream_number == 0xFFFFFFFF) {
            std::fprintf(stderr, "Error: Failed find a HFYU encoded video stream inside the avi file.\n");
            return false;
        }

        //const avi::strh_type& strh = this->video.get_strhs()[stream_number];
        const avi::strf_vids_type& strf = this->video.get_strfs()[stream_number].strf_vids;

        if (strf.height < 0) {
            this->interlaced = ((-strf.height) > this->field_threshold);
        }
        else {
            this->interlaced = ((strf.height) > this->field_threshold);
        }

        // Determine where the huffman tables are stored.
        if (strf.header_size == 40) {
            // Tables are not stored in the file.
            if ((strf.bit_count & 0x0007) != 0) {
                std::fprintf(stderr, "Error: Invalid bit count field with classic tables is not supported.\n");
                return false;
            }
            this->bit_count = (strf.bit_count & ~0x0007);
            if (this->bit_count >= 24) {
                this->mode = tables::modes::rgb_classic;
            }
            else {
                this->mode = tables::modes::yuv_classic;
            }
            tables::get_tables(
                this->mode,
                this->decode[0].shift,
                this->decode[1].shift,
                this->decode[2].shift,
                this->decode[0].add_shifted,
                this->decode[1].add_shifted,
                this->decode[2].add_shifted
            );
        }
        else {
            const unsigned char* compressed_table_data = nullptr;
            unsigned long long int compressed_table_length = 0;

            // Tables are stored in the file.
            if ((strf.bit_count & 0x0007) == 0) {
                // Extradata is some config followed by table.

                if (strf.extradata.size() < 4) {
                    std::fprintf(stderr, "Error: Missing additional configuration parameters in stream header extradata.\n");
                    return false;
                }

                if ((strf.extradata[1] & 0x07) != 0) {
                    std::fprintf(stderr, "Error: Missing invalid additional configuration parameters in stream header extradata.\n");
                    return false;
                }
                this->bit_count = strf.extradata[1];

                switch (strf.extradata[0]) {
                    default:
                    case  0:
                        this->mode = (this->bit_count >= 24) ? tables::modes::rgb_prediction_left : tables::modes::yuv_prediction_left;
                        break;
                    case  1:
                        this->mode = tables::modes::yuv_prediction_gradient;
                        break;
                    case  2:
                        this->mode = tables::modes::yuv_prediction_median;
                        break;
                    case 64:
                        this->mode = tables::modes::rgb_prediction_left_decorrelate;
                        break;
                    case 65:
                        this->mode = tables::modes::rgb_prediction_gradient_decorrelate;
                        break;
                }

                // If we are not ignoring the interlaced flag.
                if (this->ignore_interlaced_flag == false) {
                    // If the flag is set to interlaced, override the interlaced boolean.
                    if (((strf.extradata[2] >> 4) & 0x0F) == 0x01) {
                        this->interlaced = true;
                    }
                    // If the flag is set to progressive, override the interlaced boolean.
                    else if (((strf.extradata[2] >> 4) & 0x0F) == 0x02) {
                        this->interlaced = false;
                    }
                    // Otherwise leave it as it was.
                }

                // unsigned char unused = strf.extradata[3];

                compressed_table_data = &strf.extradata[4];
                compressed_table_length = strf.extradata.size() - 4;
            }
            else {
                // Extradata just the table, no additional config.

                switch (strf.bit_count & 7) {
                    default:
                    case 1:
                        this->mode = (strf.bit_count >= 24) ? tables::modes::rgb_prediction_left : tables::modes::yuv_prediction_left;
                        break;
                    case 2:
                        this->mode = tables::modes::rgb_prediction_left_decorrelate;
                        break;
                    case 3:
                        this->mode = (strf.bit_count >= 24) ? tables::modes::rgb_prediction_gradient_decorrelate : tables::modes::yuv_prediction_gradient;
                        break;
                    case 4:
                        this->mode = tables::modes::yuv_prediction_median;
                        break;
                }

                this->bit_count = (strf.bit_count & ~0x0007);

                compressed_table_data = &strf.extradata[0];
                compressed_table_length = strf.extradata.size();
            }

            // Check tables were found.
            if ((compressed_table_data == nullptr) || (compressed_table_length == 0)) {
                std::fprintf(stderr, "Error: Missing huffman table in stream header extradata.\n");
                return false;
            }

            // Decompress runlength encoded tables of bit lengths per code.
            // Stored in this order: YUV: Y_table, U_table, V_table
            // Stored in this order: RGB: B_table, G_table, R_table
            // Stored in this order: RGB with decorrelation: B-G_table, G_table, R-G_table
            unsigned int data_index = 0;
            for (int channel_index = 0; channel_index < 3; ++channel_index) {
                int table_index = 0;
                do {
                    if (data_index >= compressed_table_length) {
                        std::fprintf(stderr, "Error: Invalid huffman table in stream header extradata, insufficient data.\n");
                        return false;
                    }
                    unsigned char value = compressed_table_data[data_index] & 0x1F;
                    int repetitions = compressed_table_data[data_index++] >> 5;
                    if (repetitions == 0) {
                        if (data_index >= compressed_table_length) {
                            std::fprintf(stderr, "Error: Invalid huffman table in stream header extradata, insufficient data after zero repetitions.\n");
                            return false;
                        }
                        repetitions = compressed_table_data[data_index++];
                        if (repetitions == 0) {
                            std::fprintf(stderr, "Error: Invalid huffman table in stream header extradata, zero repetitions.\n");
                            return false;
                        }
                    }
                    if (table_index + repetitions > 256) {
                        std::fprintf(stderr, "Error: Invalid huffman table in stream header extradata, invalid runlength encoding.\n");
                        return false;
                    }
                    while (repetitions--) {
                        this->decode[channel_index].shift.data[table_index++] = value;
                    }
                } while (table_index < 256);
            }
            // Should be at least one null byte at the end.
            if (data_index == compressed_table_length) {
                std::fprintf(stderr, "Error: Invalid huffman table in stream header extradata, missing null byte.\n");
                return false;
            }
            if (compressed_table_data[data_index] != 0x00) {
                std::fprintf(stderr, "Error: Invalid huffman table in stream header extradata, invalid null byte.\n");
                return false;
            }

            // Calculate the add_shifted tables.
            for (int channel_index = 0; channel_index < 3; ++channel_index) {
                int min_bits_processed = 32;
                unsigned int bits = 0;
                do {
                    int max_bits_pending = 0;
                    for (int i = 0; i < 256; ++i) {
                        if ((this->decode[channel_index].shift.data[i] < min_bits_processed) && (this->decode[channel_index].shift.data[i] > max_bits_pending)) {
                            max_bits_pending = this->decode[channel_index].shift.data[i];
                        }
                    }
                    unsigned int bit = 1 << (32 - max_bits_pending);
                    if (bits & (bit - 1)) {
                        std::fprintf(stderr, "Error: Invalid huffman table in stream header extradata, ???.\n");
                        return false;
                    }
                    for (int i = 0; i < 256; ++i) {
                        if (this->decode[channel_index].shift.data[i] == max_bits_pending) {
                            this->decode[channel_index].add_shifted.data[i] = bits;
                            bits += bit;
                        }
                    }
                    min_bits_processed = max_bits_pending;
                } while (bits & 0xFFFFFFFF);
            }
        }

        // Validate the bit count per pixel.
        if ((this->bit_count != 16) && (this->bit_count != 24) && (this->bit_count != 32)) {
            std::fprintf(stderr, "Error: Unsupported bit count per pixel.\n");
            return false;
        }

        // Compute the decode tables from the extracted tables.
        for (int channel_index = 0; channel_index < 3; ++channel_index) {
            int code_lengths[256] = {};
            int code_firstbits[256] = {};
            int table_lengths[32];
            for (int i = 0; i < 32; ++i) {
                table_lengths[i] = -1;
            }
            int all_zero_code = -1;
            for (int i = 0; i < 256; ++i) {
                if (this->decode[channel_index].add_shifted.data[i] != 0) {
                    for (int firstbit = 31; firstbit >= 0; --firstbit) {
                        if (this->decode[channel_index].add_shifted.data[i] & (1 << firstbit)) {
                            code_firstbits[i] = firstbit;
                            const int code_length = this->decode[channel_index].shift.data[i] - (32 - firstbit);
                            code_lengths[i] = code_length;
                            table_lengths[firstbit] = std::max(static_cast<int>(table_lengths[firstbit]), code_length);
                            break;
                        }
                    }
                } else {
                    all_zero_code = i;
                }
            }
            if (all_zero_code < 0) {
                std::fprintf(stderr, "Failed to find all zero code in huffman table.\n");
                return false;
            }
            unsigned char* p = this->decode[channel_index].data;
            *p++ = 31;
            *p++ = static_cast<unsigned char>(all_zero_code);
            for (int i = 0; i < 32; ++i) {
                if (table_lengths[i] == -1) {
                    this->decode[channel_index].pointers[i] = this->decode[channel_index].data;
                } else {
                    this->decode[channel_index].pointers[i] = p;
                    *p++ = static_cast<unsigned char>(i - table_lengths[i]);
                    p += 1 << table_lengths[i];
                }
            }
            for (int i = 0; i < 256; ++i) {
                if (this->decode[channel_index].add_shifted.data[i]) {
                    int firstbit = code_firstbits[i];
                    int val = static_cast<int>(this->decode[channel_index].add_shifted.data[i]) - (1 << firstbit);
                    unsigned char* table = this->decode[channel_index].pointers[firstbit];
                    for (int j = 0; j < (1 << (table_lengths[firstbit] - code_lengths[i])); ++j) {
                        (&table[1 + (val >> table[0])])[j] = static_cast<unsigned char>(i);
                    }
                }
            }
        }

#if 1
        // TODO: Remove this information dump.
        switch (this->mode) {
            case tables::modes::yuv_classic: {
                std::fprintf(stderr, "Mode:       yuv_classic\n");
            } break;
            case tables::modes::yuv_prediction_left: {
                std::fprintf(stderr, "Mode:       yuv_prediction_left\n");
            } break;
            case tables::modes::yuv_prediction_gradient: {
                std::fprintf(stderr, "Mode:       yuv_prediction_gradient\n");
            } break;
            case tables::modes::yuv_prediction_median: {
                std::fprintf(stderr, "Mode:       yuv_prediction_median\n");
            } break;
            case tables::modes::rgb_classic: {
                std::fprintf(stderr, "Mode:       rgb_classic\n");
            } break;
            case tables::modes::rgb_prediction_left: {
                std::fprintf(stderr, "Mode:       rgb_prediction_left\n");
            } break;
            case tables::modes::rgb_prediction_left_decorrelate: {
                std::fprintf(stderr, "Mode:       rgb_prediction_left_decorrelate\n");
            } break;
            case tables::modes::rgb_prediction_gradient_decorrelate: {
                std::fprintf(stderr, "Mode:       rgb_prediction_gradient_decorrelate\n");
            } break;
        }
        std::fprintf(stderr, "Interlaced: %d\n", this->interlaced);
        std::fprintf(stderr, "SRC bits:   %d\n", this->bit_count);
        std::fprintf(stderr, "DST bits:   %d\n", strf.bit_count);
        std::fprintf(stderr, "Width:      %d\n", strf.width);
        std::fprintf(stderr, "Height:     %d\n", strf.height);
#endif

        // Compute decompression parameters.
        unsigned long long int decompressed_image_size = static_cast<unsigned long long int>(strf.width * strf.height * (this->bit_count / 8));

        // Allocate uncompressed frame storage.
        this->frames_uncompressed.reserve(this->video.get_frames().size());

        // Begin decompression.
        switch (this->mode) {
            // YUV2 and UYVY 4:2:2 Formats, 16 bits per pixel.
            case tables::modes::yuv_classic:
            case tables::modes::yuv_prediction_left: {
                if (this->bit_count != 16) {
                    std::fprintf(stderr, "Error: Unsupported bit count for yuv modes.\n");
                    return false;
                }
                for (const avi::frame_type& frame : this->video.get_frames()[stream_number]) {
                    this->frames_uncompressed.push_back({std::vector<unsigned char>(decompressed_image_size, 0)});
                    // Note: Data is in Y U Y V order.
                    const tables::decode_table_type* tables[4] = {
                        &decode[0], &decode[1], &decode[0], &decode[2]
                    };
                    if (!decode_hfyu(frame.data.data(), frame.data.size(), this->frames_uncompressed.back().data.data(), &tables[0])) {
                        return false;
                    }
                    // Note: Predictor values start from the second Y.
                    unsigned char predictor_values[3] = {
                        this->frames_uncompressed.back().data[2],
                        this->frames_uncompressed.back().data[1],
                        this->frames_uncompressed.back().data[3]
                    };
                    // Note: Predictors are in Y U Y V order.
                    unsigned char* predictors[4] = {
                        &predictor_values[0], &predictor_values[1], &predictor_values[0], &predictor_values[2]
                    };
                    unpredict_left(this->frames_uncompressed.back().data.data(), this->frames_uncompressed.back().data.data(), &predictors[0]);
                }
            } break;
            case tables::modes::yuv_prediction_gradient: {
                if (this->bit_count != 16) {
                    std::fprintf(stderr, "Error: Unsupported bit count for yuv modes.\n");
                    return false;
                }
                for (const avi::frame_type& frame : this->video.get_frames()[stream_number]) {
                    this->frames_uncompressed.push_back({std::vector<unsigned char>(decompressed_image_size, 0)});
                    // Note: Data is in Y U Y V order.
                    const tables::decode_table_type* tables[4] = {
                        &decode[0], &decode[1], &decode[0], &decode[2]
                    };
                    if (!decode_hfyu(frame.data.data(), frame.data.size(), this->frames_uncompressed.back().data.data(), &tables[0])) {
                        return false;
                    }
                    // Note: First three predictor values start from the second Y, same as unpredict_left.
                    unsigned char predictor_values[3] = {
                        this->frames_uncompressed.back().data[2],
                        this->frames_uncompressed.back().data[1],
                        this->frames_uncompressed.back().data[3]
                    };
                    // Note: Predictors are in Y U Y V order.
                    unsigned char* predictors[4] = {
                        &predictor_values[0], &predictor_values[1], &predictor_values[0], &predictor_values[2]
                    };
                    avi::frame_type frame_buffer = this->frames_uncompressed.back();
                    unpredict_left(frame_buffer.data.data(), this->frames_uncompressed.back().data.data(), &predictors[0]);
                    unpredict_gradient(this->frames_uncompressed.back().data.data());
                }
            } break;
            case tables::modes::yuv_prediction_median: {
                if (this->bit_count != 16) {
                    std::fprintf(stderr, "Error: Unsupported bit count for yuv modes.\n");
                    return false;
                }
                for (const avi::frame_type& frame : this->video.get_frames()[stream_number]) {
                    this->frames_uncompressed.push_back({std::vector<unsigned char>(decompressed_image_size, 0)});
                    // Note: Data is in Y U Y V order.
                    const tables::decode_table_type* tables[4] = {
                        &decode[0], &decode[1], &decode[0], &decode[2]
                    };
                    if (!decode_hfyu(frame.data.data(), frame.data.size(), this->frames_uncompressed.back().data.data(), &tables[0])) {
                        return false;
                    }
                    // Note: Predictor values start from the second Y.
                    unsigned char predictor_values[3] = {
                        this->frames_uncompressed.back().data[2],
                        this->frames_uncompressed.back().data[1],
                        this->frames_uncompressed.back().data[3]
                    };
                    // Note: Predictors are in Y U Y V order.
                    unsigned char* predictors[4] = {
                        &predictor_values[0], &predictor_values[1], &predictor_values[0], &predictor_values[2]
                    };
                    avi::frame_type frame_buffer = this->frames_uncompressed.back();
                    unpredict_median(frame_buffer.data.data(), this->frames_uncompressed.back().data.data(), predictors);
                }
            } break;
            // RGB and RGBA Formats, 24 or 32 bits per pixel.
            case tables::modes::rgb_classic:
            case tables::modes::rgb_prediction_left: {
                if ((this->bit_count != 24) && (this->bit_count != 32)) {
                    std::fprintf(stderr, "Error: Unsupported bit count for rgb modes.\n");
                    return false;
                }
                for (const avi::frame_type& frame : this->video.get_frames()[stream_number]) {
                    this->frames_uncompressed.push_back({std::vector<unsigned char>(decompressed_image_size, 0)});
                    // Note: Data is in B G R A order.
                    const tables::decode_table_type* tables[4] = {
                        &decode[0], &decode[1], &decode[2], &decode[2]
                    };
                    if (!decode_hfyu(frame.data.data(), frame.data.size(), this->frames_uncompressed.back().data.data(), &tables[0])) {
                        return false;
                    }
                    unsigned char predictor_values[4] = {
                        this->frames_uncompressed.back().data[0],
                        this->frames_uncompressed.back().data[1],
                        this->frames_uncompressed.back().data[2],
                        this->frames_uncompressed.back().data[3]
                    };
                    // Note: Predictors are in B G R A order.
                    unsigned char* predictors[4] = {
                        &predictor_values[0], &predictor_values[1], &predictor_values[2], &predictor_values[3]
                    };
                    unpredict_left(this->frames_uncompressed.back().data.data(), this->frames_uncompressed.back().data.data(), &predictors[0]);
                    avi::frame_type frame_buffer = this->frames_uncompressed.back();
                    flip(frame_buffer.data.data(), this->frames_uncompressed.back().data.data());
                }
            } break;
            case tables::modes::rgb_prediction_left_decorrelate: {
                if ((this->bit_count != 24) && (this->bit_count != 32)) {
                    std::fprintf(stderr, "Error: Unsupported bit count for rgb modes.\n");
                    return false;
                }
                for (const avi::frame_type& frame : this->video.get_frames()[stream_number]) {
                    this->frames_uncompressed.push_back({std::vector<unsigned char>(decompressed_image_size, 0)});
                    // Note: Data is in G Gb Gr A order, except for the ignored first pixel.
                    const tables::decode_table_type* tables[4] = {
                        &decode[1], &decode[0], &decode[2], &decode[2]
                    };
                    if (!decode_hfyu(frame.data.data(), frame.data.size(), this->frames_uncompressed.back().data.data(), &tables[0])) {
                        return false;
                    }
                    // Note: First pixel is in B G R A order.
                    unsigned char predictor_values[4] = {
                        static_cast<unsigned char>(this->frames_uncompressed.back().data[0] - this->frames_uncompressed.back().data[1]),
                        static_cast<unsigned char>(this->frames_uncompressed.back().data[1]),
                        static_cast<unsigned char>(this->frames_uncompressed.back().data[2] - this->frames_uncompressed.back().data[1]),
                        static_cast<unsigned char>(this->frames_uncompressed.back().data[3] - this->frames_uncompressed.back().data[1])
                    };
                    // Note: Predictors are in G Gb Gr A order.
                    unsigned char* predictors[4] = {
                        &predictor_values[1], &predictor_values[0], &predictor_values[2], &predictor_values[3]
                    };
                    unpredict_left(this->frames_uncompressed.back().data.data(), this->frames_uncompressed.back().data.data(), &predictors[0]);
                    avi::frame_type frame_buffer = this->frames_uncompressed.back();
                    recorrelate(frame_buffer.data.data(), this->frames_uncompressed.back().data.data());
                    frame_buffer = this->frames_uncompressed.back();
                    flip(frame_buffer.data.data(), this->frames_uncompressed.back().data.data());
                }
            } break;
            case tables::modes::rgb_prediction_gradient_decorrelate: {
                if ((this->bit_count != 24) && (this->bit_count != 32)) {
                    std::fprintf(stderr, "Error: Unsupported bit count for rgb modes.\n");
                    return false;
                }
                for (const avi::frame_type& frame : this->video.get_frames()[stream_number]) {
                    this->frames_uncompressed.push_back({std::vector<unsigned char>(decompressed_image_size, 0)});
                    // Note: Data is in G Gb Gr A order, except for the ignored first pixel.
                    const tables::decode_table_type* tables[4] = {
                        &decode[1], &decode[0], &decode[2], &decode[2]
                    };
                    if (!decode_hfyu(frame.data.data(), frame.data.size(), this->frames_uncompressed.back().data.data(), &tables[0])) {
                        return false;
                    }
                    // Note: First pixel is in B G R A order.
                    unsigned char predictor_values[4] = {
                        static_cast<unsigned char>(this->frames_uncompressed.back().data[0] - this->frames_uncompressed.back().data[1]),
                        static_cast<unsigned char>(this->frames_uncompressed.back().data[1]),
                        static_cast<unsigned char>(this->frames_uncompressed.back().data[2] - this->frames_uncompressed.back().data[1]),
                        static_cast<unsigned char>(this->frames_uncompressed.back().data[3] - this->frames_uncompressed.back().data[1])
                    };
                    // Note: Predictors are in G Gb Gr A order.
                    unsigned char* predictors[4] = {
                        &predictor_values[1], &predictor_values[0], &predictor_values[2], &predictor_values[3]
                    };
                    avi::frame_type frame_buffer = this->frames_uncompressed.back();
                    unpredict_left(frame_buffer.data.data(), this->frames_uncompressed.back().data.data(), &predictors[0]);
                    frame_buffer = this->frames_uncompressed.back();
                    recorrelate(frame_buffer.data.data(), this->frames_uncompressed.back().data.data());
                    unpredict_gradient(this->frames_uncompressed.back().data.data());
                    frame_buffer = this->frames_uncompressed.back();
                    flip(frame_buffer.data.data(), this->frames_uncompressed.back().data.data());
                }
            } break;
        }

        return true;
    }

public:
    int get_bit_count() const {
        return this->bit_count;
    }

    const avi::strf_vids_type& get_frame_header() const {
        return this->video.get_strfs()[this->stream_number].strf_vids;
    }

    const std::vector<avi::frame_type>& get_frames() const {
        return this->video.get_frames()[this->stream_number];
    }

    const std::vector<avi::frame_type>& get_frames_uncompressed() const {
        return this->frames_uncompressed;
    }

private:
    constexpr static int find_most_significant_bit_index(unsigned int value) {
        for (int index = 31; index >= 0; --index) {
            if ((value & 0x80000000) != 0) {
                return index;
            }
            value += value;
        }
        return -1;
    }

private:
    bool decode_hfyu(
        const unsigned char* compressed,
        size_t compressed_size,
        unsigned char* decompressed,
        const tables::decode_table_type** tables
    ) const {
        const int width = (this->bit_count / 8) == 2 ? this->get_frame_header().width / 2 : this->get_frame_header().width;
        const int height = this->get_frame_header().height;
        const int channels = (this->bit_count / 8) == 2 ? 4 : (this->bit_count / 8);

        unsigned int stream_index = 0;
        for (int y = 0; y < height; ++y) {
            for (int x = 0; x < width; ++x) {
                // Handle the very first pixel separately, it is stored uncompressed.
                if ((y == 0) && (x == 0)) {
                    // For rgb streams there is still fours bytes for the first pixel so the first byte is dropped.
                    // Note: This is achieved by using a boolean test cast to int as the first channel index and always interating to 4.
                    for (int channel = ((this->bit_count / 8) == 3); channel < 4; ++channel) {
                        *decompressed++ = compressed[channel];
                    }
                    stream_index += 32;
                    continue;
                }

                for (int channel = 0; channel < channels; ++channel) {
                    // Calculate the indexes.
                    // block_index: ignoring the bottom five bits (meaning we could be off by up to 31 bits).
                    // fine_index:  just containing this fine offset (offset up to 31 bits).
                    // Note: The block_index is multiplied by four as we're indexing into an 8bit array rather than a 32bit one.
                    const unsigned int block_index = (stream_index >> 5) * 4;
                    const unsigned int fine_index  = (stream_index & 0b00011111);

                    // Extract data the data of the next eight bytes from this position.
                    unsigned long long int block_data = 0;
                    if (block_index + 7 < compressed_size) {
                        block_data =
                            static_cast<unsigned long long int>(compressed[block_index + 3 + 0]) << 56 |
                            static_cast<unsigned long long int>(compressed[block_index + 2 + 0]) << 48 |
                            static_cast<unsigned long long int>(compressed[block_index + 1 + 0]) << 40 |
                            static_cast<unsigned long long int>(compressed[block_index + 0 + 0]) << 32 |
                            static_cast<unsigned long long int>(compressed[block_index + 3 + 4]) << 24 |
                            static_cast<unsigned long long int>(compressed[block_index + 2 + 4]) << 16 |
                            static_cast<unsigned long long int>(compressed[block_index + 1 + 4]) <<  8 |
                            static_cast<unsigned long long int>(compressed[block_index + 0 + 4]) <<  0 ;
                    }
                    else if (block_index + 3 < compressed_size) {
                        block_data =
                            static_cast<unsigned long long int>(compressed[block_index + 3 + 0]) << 56 |
                            static_cast<unsigned long long int>(compressed[block_index + 2 + 0]) << 48 |
                            static_cast<unsigned long long int>(compressed[block_index + 1 + 0]) << 40 |
                            static_cast<unsigned long long int>(compressed[block_index + 0 + 0]) << 32 ;
                    }
                    else {
                        std::fprintf(stderr, "Invalid compressed frame, data needed %lu bytes over. [%d, %d][%d] Offset B: %d F: %d\n", block_index - compressed_size, x, y, channel, block_index, fine_index);
                        return false;
                    }

                    // Shift the extracted data by the previously ignored bottom five bits.
                    const unsigned long long int fine_data = block_data << fine_index;

                    // Then extract the most significant four bytes as these will contain the code.
                    const unsigned int code = fine_data >> 32;

                    // Find the index of the most significant bit, ensure an index is found by bitwise ORing the least significant bit.
                    const int tree_index = find_most_significant_bit_index(code | 1);

                    const unsigned char decoded = *(tables[channel]->pointers[tree_index] + ((code & ~(1u << tree_index)) >> tables[channel]->pointers[tree_index][0]) + 1);
                    const unsigned int advance = *(tables[channel]->shift.data + decoded);

                    if (advance == 0) {
                        fprintf(stderr, "Invalid compressed frame, failed to advance. [%d, %d][%d]\n", x, y, channel);
                        return false;
                    }

                    *decompressed++ = decoded;
                    stream_index += advance;
                }
            }
        }
        return true;
    }

    void unpredict_left(
        const unsigned char* predicted,
        unsigned char* actual,
        unsigned char** predictors
    ) const {
        const int width = ((this->bit_count / 8) == 2) ? (this->get_frame_header().width / 2) : this->get_frame_header().width;
        const int height = this->get_frame_header().height;
        const int channels = ((this->bit_count / 8) == 2) ? 4 : (this->bit_count / 8);

        for (int y = 0; y < height; ++y) {
            for (int x = 0; x < width; ++x) {
                if ((y == 0) && (x == 0)) {
                    for (int channel = 0; channel < channels; ++channel) {
                        *actual++ = *predicted++;
                    }
                    continue;
                }
                for (int channel = 0; channel < channels; ++channel) {
                    *(predictors[channel]) += *predicted++;
                    *actual++ = *(predictors[channel]);
                }
            }
        }
    }

    void unpredict_gradient(
        unsigned char* image
    ) const {
        const int width = ((this->bit_count / 8) == 2) ? (this->get_frame_header().width / 2) : this->get_frame_header().width;
        const int height = this->get_frame_header().height;
        const int channels = ((this->bit_count / 8) == 2) ? 4 : (this->bit_count / 8);

        image += (channels * width * (1 + this->interlaced));
        for (int y = (1 + this->interlaced); y < height; ++y) {
            for (int x = 0; x < width; ++x) {
                for (int channel = 0; channel < channels; ++channel) {
                    *image += *(image - (channels * width * (1 + this->interlaced)));
                    ++image;
                }
            }
        }
    }

    void unpredict_median(
        const unsigned char* predicted,
        unsigned char* actual,
        unsigned char** predictors
    ) const {
        constexpr static const auto median = [](unsigned char value0, unsigned char value1, unsigned char value2) {
            if (value0 > value1) { unsigned char temp = value0; value0 = value1; value1 = temp; }
            if (value1 > value2) { unsigned char temp = value1; value1 = value2; value2 = temp; }
            if (value0 > value1) { unsigned char temp = value0; value0 = value1; value1 = temp; }
            return value1;
        };

        const int width = ((this->bit_count / 8) == 2) ? (this->get_frame_header().width / 2) : this->get_frame_header().width;
        const int height = this->get_frame_header().height;
        const int channels = ((this->bit_count / 8) == 2) ? 4 : (this->bit_count / 8);

        for (int y = 0; y < height; ++y) {
            for (int x = 0; x < width; ++x) {
                if ((y == 0) && (x == 0)) {
                    for (int channel = 0; channel < channels; ++channel) {
                        *actual++ = *predicted++;
                    }
                    continue;
                }
                // First row(s) is/are predict left.
                if (y < (1 + this->interlaced)) {
                    for (int channel = 0; channel < channels; ++channel) {
                        *(predictors[channel]) += *predicted++;
                        *actual++ = *(predictors[channel]);
                    }
                    continue;
                }
                // First four pixels of next row are also predict left.
                if ((y == (1 + this->interlaced)) && (x < 2)) {
                    for (int channel = 0; channel < channels; ++channel) {
                        *(predictors[channel]) += *predicted++;
                        *actual++ = *(predictors[channel]);
                    }
                    continue;
                }
                // Remainder are predicted from the median.
                for (int channel = 0; channel < channels; ++channel) {
                    const int channel_jump = ((this->bit_count / 8) != 2) ? (channels) : ((channel % 2 == 0) ? (2) : (4));
                    const unsigned char pixel_left = *(actual - channel_jump);
                    const unsigned char pixel_above = *(actual - (width * channels));
                    const unsigned char pixel_above_left = *(actual - (width * channels) - channel_jump);
                    *actual++ = *predicted++ + median(pixel_left, pixel_above, pixel_left + pixel_above - pixel_above_left);
                }
            }
        }
    }

    void recorrelate(
        const unsigned char* decorrelated,
        unsigned char* correlated
    ) const {
        const int width = ((this->bit_count / 8) == 2) ? (this->get_frame_header().width / 2) : this->get_frame_header().width;
        const int height = this->get_frame_header().height;
        const int channels = ((this->bit_count / 8) == 2) ? 4 : (this->bit_count / 8);

        for (int y = 0; y < height; ++y) {
            for (int x = 0; x < width; ++x) {
                // Handle the very first pixel separately, it is stored already correlated.
                if ((y == 0) && (x == 0)) {
                    for (int channel = 0; channel < channels; ++channel) {
                        *correlated++ = *decorrelated++;
                    }
                    continue;
                }
                // Note: The decorreleated input data is stored in [G, B-G, R-G, (A-G)] order.
                // Note: The correlated output data is stored in [B, G, R, (A)] order.
                const unsigned char g = *decorrelated++;
                const unsigned char b_g = *decorrelated++;
                const unsigned char r_g = *decorrelated++;
                *correlated++ = b_g + g;
                *correlated++ = g;
                *correlated++ = r_g + g;
                if (channels == 4) {
                    const unsigned char a_g = *decorrelated++;
                    *correlated++ = a_g + g;
                }
            }
        }
    }

    void flip(
        const unsigned char* original,
        unsigned char* flipped
    ) const {
        const int width = ((this->bit_count / 8) == 2) ? (this->get_frame_header().width / 2) : this->get_frame_header().width;
        const int height = this->get_frame_header().height;
        const int channels = ((this->bit_count / 8) == 2) ? 4 : (this->bit_count / 8);

        flipped += channels * width * (height - 1);
        for (int y = 0; y < height; ++y) {
            for (int x = 0; x < width; ++x) {
                for (int channel = 0; channel < channels; ++channel) {
                    *flipped++ = *original++;
                }
            }
            flipped -= 2 * channels * width;
        }
    }
};
